
mesmo_payload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c60  08006c60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c68  08006c68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a54  20000010  08006c80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a64  08006c80  00024a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019deb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003291  00000000  00000000  00039e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003009  00000000  00000000  0003f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b33  00000000  00000000  000427f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9306  00000000  00000000  0005a324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015362a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005500  00000000  00000000  0015367c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006be0 	.word	0x08006be0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08006be0 	.word	0x08006be0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb6d 	bl	8000bf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f820 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8ac 	bl	800067c <MX_GPIO_Init>
  MX_UART4_Init();
 8000524:	f000 f878 	bl	8000618 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f003 fd56 	bl	8003fd8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <main+0x38>)
 800052e:	2100      	movs	r1, #0
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <main+0x3c>)
 8000532:	f003 fdbb 	bl	80040ac <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <main+0x40>)
 800053a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(&huart4, UART4_rxBuffer, 2);
 800053c:	2202      	movs	r2, #2
 800053e:	4906      	ldr	r1, [pc, #24]	; (8000558 <main+0x44>)
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x48>)
 8000542:	f002 fb36 	bl	8002bb2 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000546:	f003 fd7b 	bl	8004040 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x36>
 800054c:	08006c24 	.word	0x08006c24
 8000550:	08000829 	.word	0x08000829
 8000554:	200000b4 	.word	0x200000b4
 8000558:	200000bc 	.word	0x200000bc
 800055c:	2000002c 	.word	0x2000002c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f006 fb2e 	bl	8006bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xb0>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xb0>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xb0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <SystemClock_Config+0xb4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <SystemClock_Config+0xb4>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <SystemClock_Config+0xb4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fe93 	bl	80012f8 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005d8:	f000 f9a2 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f922 	bl	8001840 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000602:	f000 f98d 	bl	8000920 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_UART4_Init+0x5c>)
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_UART4_Init+0x60>)
 8000620:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_UART4_Init+0x5c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_UART4_Init+0x5c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_UART4_Init+0x5c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_UART4_Init+0x5c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_UART4_Init+0x5c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_UART4_Init+0x5c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_UART4_Init+0x5c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_UART4_Init+0x5c>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_UART4_Init+0x5c>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_UART4_Init+0x5c>)
 800065c:	f002 f9d8 	bl	8002a10 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000666:	f000 f95b 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  HAL_UART_IRQHandler(&huart4);
 800066a:	4802      	ldr	r0, [pc, #8]	; (8000674 <MX_UART4_Init+0x5c>)
 800066c:	f002 fae6 	bl	8002c3c <HAL_UART_IRQHandler>
  /* USER CODE END UART4_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40004c00 	.word	0x40004c00

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	4b38      	ldr	r3, [pc, #224]	; (8000774 <MX_GPIO_Init+0xf8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a37      	ldr	r2, [pc, #220]	; (8000774 <MX_GPIO_Init+0xf8>)
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b35      	ldr	r3, [pc, #212]	; (8000774 <MX_GPIO_Init+0xf8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0320 	and.w	r3, r3, #32
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b32      	ldr	r3, [pc, #200]	; (8000774 <MX_GPIO_Init+0xf8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a31      	ldr	r2, [pc, #196]	; (8000774 <MX_GPIO_Init+0xf8>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <MX_GPIO_Init+0xf8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <MX_GPIO_Init+0xf8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <MX_GPIO_Init+0xf8>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <MX_GPIO_Init+0xf8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f240 410c 	movw	r1, #1036	; 0x40c
 80006e0:	4825      	ldr	r0, [pc, #148]	; (8000778 <MX_GPIO_Init+0xfc>)
 80006e2:	f000 fdd5 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2109      	movs	r1, #9
 80006ea:	4824      	ldr	r0, [pc, #144]	; (800077c <MX_GPIO_Init+0x100>)
 80006ec:	f000 fdd0 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_LED_1_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2188      	movs	r1, #136	; 0x88
 80006f4:	4822      	ldr	r0, [pc, #136]	; (8000780 <MX_GPIO_Init+0x104>)
 80006f6:	f000 fdcb 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF2 PF3 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 80006fa:	f240 430c 	movw	r3, #1036	; 0x40c
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4819      	ldr	r0, [pc, #100]	; (8000778 <MX_GPIO_Init+0xfc>)
 8000714:	f000 fc10 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000718:	2320      	movs	r3, #32
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_GPIO_Init+0xfc>)
 800072e:	f000 fc03 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000732:	2309      	movs	r3, #9
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_GPIO_Init+0x100>)
 800074a:	f000 fbf5 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_LED_1_Pin PA7 */
  GPIO_InitStruct.Pin = BLUE_LED_1_Pin|GPIO_PIN_7;
 800074e:	2388      	movs	r3, #136	; 0x88
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_GPIO_Init+0x104>)
 8000766:	f000 fbe7 	bl	8000f38 <HAL_GPIO_Init>

}
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40021400 	.word	0x40021400
 800077c:	40020800 	.word	0x40020800
 8000780:	40020000 	.word	0x40020000

08000784 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    uint8_t cmd = UART4_rxBuffer[1];
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <HAL_UART_RxCpltCallback+0x90>)
 800078e:	785b      	ldrb	r3, [r3, #1]
 8000790:	73fb      	strb	r3, [r7, #15]
    uint8_t data = UART4_rxBuffer[0];
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <HAL_UART_RxCpltCallback+0x90>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	73bb      	strb	r3, [r7, #14]
    uint8_t pingback[] = "1409";
 8000798:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <HAL_UART_RxCpltCallback+0x94>)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a2:	6018      	str	r0, [r3, #0]
 80007a4:	3304      	adds	r3, #4
 80007a6:	7019      	strb	r1, [r3, #0]

    switch (cmd) {
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d826      	bhi.n	80007fe <HAL_UART_RxCpltCallback+0x7a>
 80007b0:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <HAL_UART_RxCpltCallback+0x34>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007c9 	.word	0x080007c9
 80007bc:	080007d9 	.word	0x080007d9
 80007c0:	080007e7 	.word	0x080007e7
 80007c4:	080007f7 	.word	0x080007f7
        case HEALTH_PING:
            HAL_UART_Transmit(&huart4, pingback, sizeof(pingback), 100);
 80007c8:	f107 0108 	add.w	r1, r7, #8
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2205      	movs	r2, #5
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <HAL_UART_RxCpltCallback+0x98>)
 80007d2:	f002 f96b 	bl	8002aac <HAL_UART_Transmit>
            break;
 80007d6:	e013      	b.n	8000800 <HAL_UART_RxCpltCallback+0x7c>
        case DATA_SEND:
            HAL_UART_Transmit(&huart4, UART4_txBuffer, sizeof(UART4_txBuffer), 100);
 80007d8:	2364      	movs	r3, #100	; 0x64
 80007da:	220a      	movs	r2, #10
 80007dc:	4910      	ldr	r1, [pc, #64]	; (8000820 <HAL_UART_RxCpltCallback+0x9c>)
 80007de:	480f      	ldr	r0, [pc, #60]	; (800081c <HAL_UART_RxCpltCallback+0x98>)
 80007e0:	f002 f964 	bl	8002aac <HAL_UART_Transmit>
            break;
 80007e4:	e00c      	b.n	8000800 <HAL_UART_RxCpltCallback+0x7c>
        case ECHO_MSG:
            HAL_UART_Transmit(&huart4, &data, 1, 100);
 80007e6:	f107 010e 	add.w	r1, r7, #14
 80007ea:	2364      	movs	r3, #100	; 0x64
 80007ec:	2201      	movs	r2, #1
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <HAL_UART_RxCpltCallback+0x98>)
 80007f0:	f002 f95c 	bl	8002aac <HAL_UART_Transmit>
            break;
 80007f4:	e004      	b.n	8000800 <HAL_UART_RxCpltCallback+0x7c>
        case LED_CONTROL:
            // Handle LED control here or set a flag to be checked in the FreeRTOS task
            ledControlFlag = data;  // Assuming ledControlFlag is a global variable
 80007f6:	7bba      	ldrb	r2, [r7, #14]
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_UART_RxCpltCallback+0xa0>)
 80007fa:	701a      	strb	r2, [r3, #0]
            break;
 80007fc:	e000      	b.n	8000800 <HAL_UART_RxCpltCallback+0x7c>
        default:
            break;
 80007fe:	bf00      	nop
    }

    HAL_UART_Receive_IT(&huart4, UART4_rxBuffer, 2);
 8000800:	2202      	movs	r2, #2
 8000802:	4904      	ldr	r1, [pc, #16]	; (8000814 <HAL_UART_RxCpltCallback+0x90>)
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_UART_RxCpltCallback+0x98>)
 8000806:	f002 f9d4 	bl	8002bb2 <HAL_UART_Receive_IT>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000bc 	.word	0x200000bc
 8000818:	08006c04 	.word	0x08006c04
 800081c:	2000002c 	.word	0x2000002c
 8000820:	200000c0 	.word	0x200000c0
 8000824:	200000b8 	.word	0x200000b8

08000828 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t pingback[] = "1409";
 8000830:	4a2b      	ldr	r2, [pc, #172]	; (80008e0 <StartDefaultTask+0xb8>)
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800083a:	6018      	str	r0, [r3, #0]
 800083c:	3304      	adds	r3, #4
 800083e:	7019      	strb	r1, [r3, #0]
  for(;;)
  {

		  switch (ledControlFlag) {
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <StartDefaultTask+0xbc>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	3b01      	subs	r3, #1
 8000848:	2b07      	cmp	r3, #7
 800084a:	d83c      	bhi.n	80008c6 <StartDefaultTask+0x9e>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <StartDefaultTask+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000875 	.word	0x08000875
 8000858:	0800087f 	.word	0x0800087f
 800085c:	08000889 	.word	0x08000889
 8000860:	08000893 	.word	0x08000893
 8000864:	0800089d 	.word	0x0800089d
 8000868:	080008a7 	.word	0x080008a7
 800086c:	080008b3 	.word	0x080008b3
 8000870:	080008bd 	.word	0x080008bd
			  case 0x01:
				  HAL_GPIO_TogglePin(BLUE_LED_1_GPIO_Port, BLUE_LED_1_Pin);
 8000874:	2108      	movs	r1, #8
 8000876:	481c      	ldr	r0, [pc, #112]	; (80008e8 <StartDefaultTask+0xc0>)
 8000878:	f000 fd23 	bl	80012c2 <HAL_GPIO_TogglePin>
				  // Turn off other LEDs
				  break;
 800087c:	e02b      	b.n	80008d6 <StartDefaultTask+0xae>
			  case 0x02:
				  HAL_GPIO_TogglePin(BLUE_LED_2_GPIO_Port, BLUE_LED_2_Pin);
 800087e:	2101      	movs	r1, #1
 8000880:	481a      	ldr	r0, [pc, #104]	; (80008ec <StartDefaultTask+0xc4>)
 8000882:	f000 fd1e 	bl	80012c2 <HAL_GPIO_TogglePin>
				  // Turn off other LEDs
				  break;
 8000886:	e026      	b.n	80008d6 <StartDefaultTask+0xae>
			  case 0x03:
				  HAL_GPIO_TogglePin(BLUE_LED_3_GPIO_Port, BLUE_LED_3_Pin);
 8000888:	2108      	movs	r1, #8
 800088a:	4818      	ldr	r0, [pc, #96]	; (80008ec <StartDefaultTask+0xc4>)
 800088c:	f000 fd19 	bl	80012c2 <HAL_GPIO_TogglePin>
				  // Turn off other LEDs
				  break;
 8000890:	e021      	b.n	80008d6 <StartDefaultTask+0xae>
			  case 0x04:
				  HAL_GPIO_TogglePin(BLUE_LED_4_GPIO_Port, BLUE_LED_4_Pin);
 8000892:	2108      	movs	r1, #8
 8000894:	4816      	ldr	r0, [pc, #88]	; (80008f0 <StartDefaultTask+0xc8>)
 8000896:	f000 fd14 	bl	80012c2 <HAL_GPIO_TogglePin>
				  // Turn off other LEDs
				  break;
 800089a:	e01c      	b.n	80008d6 <StartDefaultTask+0xae>
			  case 0x05:
				  HAL_GPIO_TogglePin(GREEN_LED_1_GPIO_Port, GREEN_LED_1_Pin);
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	4815      	ldr	r0, [pc, #84]	; (80008f4 <StartDefaultTask+0xcc>)
 80008a0:	f000 fd0f 	bl	80012c2 <HAL_GPIO_TogglePin>
				  // Turn off other LEDs
				  break;
 80008a4:	e017      	b.n	80008d6 <StartDefaultTask+0xae>
			  case 0x06:
				  HAL_GPIO_TogglePin(GREEN_LED_2_GPIO_Port, GREEN_LED_2_Pin);
 80008a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <StartDefaultTask+0xc8>)
 80008ac:	f000 fd09 	bl	80012c2 <HAL_GPIO_TogglePin>
				  // Turn off other LEDs
				  break;
 80008b0:	e011      	b.n	80008d6 <StartDefaultTask+0xae>
			  case 0x07:
				  HAL_GPIO_TogglePin(GREEN_LED_3_GPIO_Port, GREEN_LED_3_Pin);
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <StartDefaultTask+0xc0>)
 80008b6:	f000 fd04 	bl	80012c2 <HAL_GPIO_TogglePin>
				  // Turn off other LEDs
				  break;
 80008ba:	e00c      	b.n	80008d6 <StartDefaultTask+0xae>
			  case 0x08:
				  HAL_GPIO_TogglePin(GREEN_LED_4_GPIO_Port, GREEN_LED_4_Pin);
 80008bc:	2104      	movs	r1, #4
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <StartDefaultTask+0xc8>)
 80008c0:	f000 fcff 	bl	80012c2 <HAL_GPIO_TogglePin>
				  // Turn off other LEDs
				  break;
 80008c4:	e007      	b.n	80008d6 <StartDefaultTask+0xae>

			  default:

				  HAL_UART_Transmit(&huart4, pingback, sizeof(pingback), 100);
 80008c6:	f107 0108 	add.w	r1, r7, #8
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	2205      	movs	r2, #5
 80008ce:	480a      	ldr	r0, [pc, #40]	; (80008f8 <StartDefaultTask+0xd0>)
 80008d0:	f002 f8ec 	bl	8002aac <HAL_UART_Transmit>
				  break;
 80008d4:	bf00      	nop
	          }
	          osDelay(10);  // Delay for task scheduling
 80008d6:	200a      	movs	r0, #10
 80008d8:	f003 fc8e 	bl	80041f8 <osDelay>
		  switch (ledControlFlag) {
 80008dc:	e7b0      	b.n	8000840 <StartDefaultTask+0x18>
 80008de:	bf00      	nop
 80008e0:	08006c04 	.word	0x08006c04
 80008e4:	200000b8 	.word	0x200000b8
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40021400 	.word	0x40021400
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	2000002c 	.word	0x2000002c

080008fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090e:	f000 f97f 	bl	8000c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40010000 	.word	0x40010000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	f06f 0001 	mvn.w	r0, #1
 800096a:	f000 fa29 	bl	8000dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0aa      	sub	sp, #168	; 0xa8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2284      	movs	r2, #132	; 0x84
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f006 f917 	bl	8006bd0 <memset>
  if(huart->Instance==UART4)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <HAL_UART_MspInit+0xc4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d144      	bne.n	8000a36 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80009ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 f958 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009c6:	f7ff ffab 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <HAL_UART_MspInit+0xc8>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <HAL_UART_MspInit+0xc8>)
 80009d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0xc8>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_UART_MspInit+0xc8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_UART_MspInit+0xc8>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0xc8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a14:	2308      	movs	r3, #8
 8000a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <HAL_UART_MspInit+0xcc>)
 8000a22:	f000 fa89 	bl	8000f38 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2105      	movs	r1, #5
 8000a2a:	2034      	movs	r0, #52	; 0x34
 8000a2c:	f000 f9c8 	bl	8000dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a30:	2034      	movs	r0, #52	; 0x34
 8000a32:	f000 f9e1 	bl	8000df8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	37a8      	adds	r7, #168	; 0xa8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40004c00 	.word	0x40004c00
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020800 	.word	0x40020800

08000a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <HAL_InitTick+0xcc>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a60:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <HAL_InitTick+0xcc>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6453      	str	r3, [r2, #68]	; 0x44
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <HAL_InitTick+0xcc>)
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a74:	f107 020c 	add.w	r2, r7, #12
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f8c4 	bl	8001c0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a84:	f001 f8ae 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8000a88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_InitTick+0xd0>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3b01      	subs	r3, #1
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_InitTick+0xd4>)
 8000a9a:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <HAL_InitTick+0xd8>)
 8000a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_InitTick+0xd4>)
 8000aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <HAL_InitTick+0xd4>)
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0xd4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <HAL_InitTick+0xd4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_InitTick+0xd4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <HAL_InitTick+0xd4>)
 8000ac0:	f001 fcc6 	bl	8002450 <HAL_TIM_Base_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d11b      	bne.n	8000b0a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ad2:	4813      	ldr	r0, [pc, #76]	; (8000b20 <HAL_InitTick+0xd4>)
 8000ad4:	f001 fd1e 	bl	8002514 <HAL_TIM_Base_Start_IT>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d111      	bne.n	8000b0a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ae6:	2019      	movs	r0, #25
 8000ae8:	f000 f986 	bl	8000df8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d808      	bhi.n	8000b04 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000af2:	2200      	movs	r2, #0
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	2019      	movs	r0, #25
 8000af8:	f000 f962 	bl	8000dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0xdc>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e002      	b.n	8000b0a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	431bde83 	.word	0x431bde83
 8000b20:	200000cc 	.word	0x200000cc
 8000b24:	40010000 	.word	0x40010000
 8000b28:	20000004 	.word	0x20000004

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b5e:	f001 fd51 	bl	8002604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000cc 	.word	0x200000cc

08000b6c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <UART4_IRQHandler+0x10>)
 8000b72:	f002 f863 	bl	8002c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000002c 	.word	0x2000002c

08000b80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000baa:	490e      	ldr	r1, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc0:	4c0b      	ldr	r4, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bce:	f7ff ffd7 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f005 ffcb 	bl	8006b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fc9d 	bl	8000514 <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000be8:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 8000bec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bf0:	20004a64 	.word	0x20004a64

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>

08000bf6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f000 f8d5 	bl	8000daa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c00:	200f      	movs	r0, #15
 8000c02:	f7ff ff23 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c06:	f7ff fe91 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000118 	.word	0x20000118

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000118 	.word	0x20000118

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	05fa0000 	.word	0x05fa0000

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff4c 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd2:	f7ff ff61 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000dd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	6978      	ldr	r0, [r7, #20]
 8000dde:	f7ff ffb1 	bl	8000d44 <NVIC_EncodePriority>
 8000de2:	4602      	mov	r2, r0
 8000de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff80 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff54 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e22:	f7ff ff09 	bl	8000c38 <HAL_GetTick>
 8000e26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d008      	beq.n	8000e46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e052      	b.n	8000eec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0216 	bic.w	r2, r2, #22
 8000e54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	695a      	ldr	r2, [r3, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d103      	bne.n	8000e76 <HAL_DMA_Abort+0x62>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0208 	bic.w	r2, r2, #8
 8000e84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0201 	bic.w	r2, r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e96:	e013      	b.n	8000ec0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e98:	f7ff fece 	bl	8000c38 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	d90c      	bls.n	8000ec0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e015      	b.n	8000eec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1e4      	bne.n	8000e98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed2:	223f      	movs	r2, #63	; 0x3f
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d004      	beq.n	8000f12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00c      	b.n	8000f2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2205      	movs	r2, #5
 8000f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e175      	b.n	8001244 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8164 	bne.w	800123e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x56>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80be 	beq.w	800123e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b66      	ldr	r3, [pc, #408]	; (800125c <HAL_GPIO_Init+0x324>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a65      	ldr	r2, [pc, #404]	; (800125c <HAL_GPIO_Init+0x324>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <HAL_GPIO_Init+0x324>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010da:	4a61      	ldr	r2, [pc, #388]	; (8001260 <HAL_GPIO_Init+0x328>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_GPIO_Init+0x32c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d037      	beq.n	8001176 <HAL_GPIO_Init+0x23e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a57      	ldr	r2, [pc, #348]	; (8001268 <HAL_GPIO_Init+0x330>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d031      	beq.n	8001172 <HAL_GPIO_Init+0x23a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a56      	ldr	r2, [pc, #344]	; (800126c <HAL_GPIO_Init+0x334>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_GPIO_Init+0x236>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a55      	ldr	r2, [pc, #340]	; (8001270 <HAL_GPIO_Init+0x338>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x232>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a54      	ldr	r2, [pc, #336]	; (8001274 <HAL_GPIO_Init+0x33c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x22e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a53      	ldr	r2, [pc, #332]	; (8001278 <HAL_GPIO_Init+0x340>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x22a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_GPIO_Init+0x344>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x226>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a51      	ldr	r2, [pc, #324]	; (8001280 <HAL_GPIO_Init+0x348>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x222>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a50      	ldr	r2, [pc, #320]	; (8001284 <HAL_GPIO_Init+0x34c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x21e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4f      	ldr	r2, [pc, #316]	; (8001288 <HAL_GPIO_Init+0x350>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x21a>
 800114e:	2309      	movs	r3, #9
 8001150:	e012      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001152:	230a      	movs	r3, #10
 8001154:	e010      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001156:	2308      	movs	r3, #8
 8001158:	e00e      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800115a:	2307      	movs	r3, #7
 800115c:	e00c      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800115e:	2306      	movs	r3, #6
 8001160:	e00a      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001162:	2305      	movs	r3, #5
 8001164:	e008      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001166:	2304      	movs	r3, #4
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800116a:	2303      	movs	r3, #3
 800116c:	e004      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800116e:	2302      	movs	r3, #2
 8001170:	e002      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001176:	2300      	movs	r3, #0
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	f002 0203 	and.w	r2, r2, #3
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	4093      	lsls	r3, r2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001188:	4935      	ldr	r1, [pc, #212]	; (8001260 <HAL_GPIO_Init+0x328>)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_GPIO_Init+0x354>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ba:	4a34      	ldr	r2, [pc, #208]	; (800128c <HAL_GPIO_Init+0x354>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c0:	4b32      	ldr	r3, [pc, #200]	; (800128c <HAL_GPIO_Init+0x354>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <HAL_GPIO_Init+0x354>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <HAL_GPIO_Init+0x354>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <HAL_GPIO_Init+0x354>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_GPIO_Init+0x354>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_GPIO_Init+0x354>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	f67f ae86 	bls.w	8000f58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40013800 	.word	0x40013800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400
 800126c:	40020800 	.word	0x40020800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40021000 	.word	0x40021000
 8001278:	40021400 	.word	0x40021400
 800127c:	40021800 	.word	0x40021800
 8001280:	40021c00 	.word	0x40021c00
 8001284:	40022000 	.word	0x40022000
 8001288:	40022400 	.word	0x40022400
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	041a      	lsls	r2, r3, #16
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43d9      	mvns	r1, r3
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	400b      	ands	r3, r1
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e291      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8087 	beq.w	800142a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800131c:	4b96      	ldr	r3, [pc, #600]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b04      	cmp	r3, #4
 8001326:	d00c      	beq.n	8001342 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001328:	4b93      	ldr	r3, [pc, #588]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b08      	cmp	r3, #8
 8001332:	d112      	bne.n	800135a <HAL_RCC_OscConfig+0x62>
 8001334:	4b90      	ldr	r3, [pc, #576]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001340:	d10b      	bne.n	800135a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001342:	4b8d      	ldr	r3, [pc, #564]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d06c      	beq.n	8001428 <HAL_RCC_OscConfig+0x130>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d168      	bne.n	8001428 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e26b      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x7a>
 8001364:	4b84      	ldr	r3, [pc, #528]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a83      	ldr	r2, [pc, #524]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 800136a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e02e      	b.n	80013d0 <HAL_RCC_OscConfig+0xd8>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x9c>
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7e      	ldr	r2, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b7c      	ldr	r3, [pc, #496]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7b      	ldr	r2, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 800138c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e01d      	b.n	80013d0 <HAL_RCC_OscConfig+0xd8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0xc0>
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b73      	ldr	r3, [pc, #460]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a72      	ldr	r2, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0xd8>
 80013b8:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a6e      	ldr	r2, [pc, #440]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a6b      	ldr	r2, [pc, #428]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc2e 	bl	8000c38 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fc2a 	bl	8000c38 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e21f      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b61      	ldr	r3, [pc, #388]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0xe8>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fc1a 	bl	8000c38 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fc16 	bl	8000c38 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e20b      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x110>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d069      	beq.n	800150a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001436:	4b50      	ldr	r3, [pc, #320]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001442:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d11c      	bne.n	8001488 <HAL_RCC_OscConfig+0x190>
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d116      	bne.n	8001488 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x17a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e1df      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b41      	ldr	r3, [pc, #260]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	493d      	ldr	r1, [pc, #244]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	e040      	b.n	800150a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d023      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a38      	ldr	r2, [pc, #224]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fbcc 	bl	8000c38 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff fbc8 	bl	8000c38 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1bd      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4929      	ldr	r1, [pc, #164]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
 80014d6:	e018      	b.n	800150a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a26      	ldr	r2, [pc, #152]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fba8 	bl	8000c38 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fba4 	bl	8000c38 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e199      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d038      	beq.n	8001588 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d019      	beq.n	8001552 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152a:	f7ff fb85 	bl	8000c38 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff fb81 	bl	8000c38 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e176      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x23a>
 8001550:	e01a      	b.n	8001588 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_RCC_OscConfig+0x280>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff fb6b 	bl	8000c38 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fb67 	bl	8000c38 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d903      	bls.n	800157c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e15c      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
 8001578:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	4b91      	ldr	r3, [pc, #580]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800157e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a4 	beq.w	80016de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10d      	bne.n	80015be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a87      	ldr	r2, [pc, #540]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015be:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d118      	bne.n	80015fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015ca:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_RCC_OscConfig+0x4d0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a7e      	ldr	r2, [pc, #504]	; (80017c8 <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb2f 	bl	8000c38 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015de:	f7ff fb2b 	bl	8000c38 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	; 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e120      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f0:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x31a>
 8001604:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a6e      	ldr	r2, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	e02d      	b.n	800166e <HAL_RCC_OscConfig+0x376>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x33c>
 800161a:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a69      	ldr	r2, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
 8001626:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
 8001632:	e01c      	b.n	800166e <HAL_RCC_OscConfig+0x376>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b05      	cmp	r3, #5
 800163a:	d10c      	bne.n	8001656 <HAL_RCC_OscConfig+0x35e>
 800163c:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	4a60      	ldr	r2, [pc, #384]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	e00b      	b.n	800166e <HAL_RCC_OscConfig+0x376>
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a5a      	ldr	r2, [pc, #360]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d015      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fadf 	bl	8000c38 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff fadb 	bl	8000c38 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e0ce      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ee      	beq.n	800167e <HAL_RCC_OscConfig+0x386>
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a2:	f7ff fac9 	bl	8000c38 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff fac5 	bl	8000c38 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0b8      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80016d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80a4 	beq.w	8001830 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d06b      	beq.n	80017cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d149      	bne.n	8001790 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fa96 	bl	8000c38 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff fa92 	bl	8000c38 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e087      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69da      	ldr	r2, [r3, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	019b      	lsls	r3, r3, #6
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	085b      	lsrs	r3, r3, #1
 8001746:	3b01      	subs	r3, #1
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	061b      	lsls	r3, r3, #24
 8001752:	4313      	orrs	r3, r2
 8001754:	4a1b      	ldr	r2, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800175a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fa66 	bl	8000c38 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fa62 	bl	8000c38 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e057      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x478>
 800178e:	e04f      	b.n	8001830 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 8001796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fa4c 	bl	8000c38 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fa48 	bl	8000c38 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e03d      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_RCC_OscConfig+0x4cc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4ac>
 80017c2:	e035      	b.n	8001830 <HAL_RCC_OscConfig+0x538>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_RCC_OscConfig+0x544>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d028      	beq.n	800182c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d121      	bne.n	800182c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d11a      	bne.n	800182c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017fc:	4013      	ands	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001802:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001804:	4293      	cmp	r3, r2
 8001806:	d111      	bne.n	800182c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	3b01      	subs	r3, #1
 8001816:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0d0      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d910      	bls.n	8001888 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 020f 	bic.w	r2, r3, #15
 800186e:	4965      	ldr	r1, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d040      	beq.n	8001964 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d115      	bne.n	8001922 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e073      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06b      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4936      	ldr	r1, [pc, #216]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001934:	f7ff f980 	bl	8000c38 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f97c 	bl	8000c38 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e053      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d210      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 020f 	bic.w	r2, r3, #15
 800197a:	4922      	ldr	r1, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	490a      	ldr	r1, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1cc>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1d0>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1d4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f82a 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08006c48 	.word	0x08006c48
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a1c:	b090      	sub	sp, #64	; 0x40
 8001a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
 8001a24:	2300      	movs	r3, #0
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d00d      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x40>
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f200 80a1 	bhi.w	8001b84 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x34>
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4a:	e09b      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a50:	e09b      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a52:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a56:	e098      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a58:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a62:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d028      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	2200      	movs	r2, #0
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	627a      	str	r2, [r7, #36]	; 0x24
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a80:	2100      	movs	r1, #0
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a84:	fb03 f201 	mul.w	r2, r3, r1
 8001a88:	2300      	movs	r3, #0
 8001a8a:	fb00 f303 	mul.w	r3, r0, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a43      	ldr	r2, [pc, #268]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a92:	fba0 1202 	umull	r1, r2, r0, r2
 8001a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a98:	460a      	mov	r2, r1
 8001a9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a9e:	4413      	add	r3, r2
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	61fa      	str	r2, [r7, #28]
 8001aaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab2:	f7fe fbad 	bl	8000210 <__aeabi_uldivmod>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4613      	mov	r3, r2
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001abe:	e053      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac0:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	617a      	str	r2, [r7, #20]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ad2:	f04f 0b00 	mov.w	fp, #0
 8001ad6:	4652      	mov	r2, sl
 8001ad8:	465b      	mov	r3, fp
 8001ada:	f04f 0000 	mov.w	r0, #0
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	0159      	lsls	r1, r3, #5
 8001ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae8:	0150      	lsls	r0, r2, #5
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	ebb2 080a 	subs.w	r8, r2, sl
 8001af2:	eb63 090b 	sbc.w	r9, r3, fp
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b0a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b0e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	00eb      	lsls	r3, r5, #3
 8001b1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b20:	00e2      	lsls	r2, r4, #3
 8001b22:	4614      	mov	r4, r2
 8001b24:	461d      	mov	r5, r3
 8001b26:	eb14 030a 	adds.w	r3, r4, sl
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	eb45 030b 	adc.w	r3, r5, fp
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b3e:	4629      	mov	r1, r5
 8001b40:	028b      	lsls	r3, r1, #10
 8001b42:	4621      	mov	r1, r4
 8001b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b48:	4621      	mov	r1, r4
 8001b4a:	028a      	lsls	r2, r1, #10
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	2200      	movs	r2, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	60fa      	str	r2, [r7, #12]
 8001b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b5c:	f7fe fb58 	bl	8000210 <__aeabi_uldivmod>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4613      	mov	r3, r2
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	3301      	adds	r3, #1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b82:	e002      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3740      	adds	r7, #64	; 0x40
 8001b90:	46bd      	mov	sp, r7
 8001b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	017d7840 	.word	0x017d7840

08001ba4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0a9b      	lsrs	r3, r3, #10
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08006c58 	.word	0x08006c58

08001be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be8:	f7ff ffdc 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0b5b      	lsrs	r3, r3, #13
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08006c58 	.word	0x08006c58

08001c0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	220f      	movs	r2, #15
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_RCC_GetClockConfig+0x60>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 020f 	and.w	r2, r3, #15
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40023c00 	.word	0x40023c00

08001c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d012      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c98:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ca2:	6093      	str	r3, [r2, #8]
 8001ca4:	4b66      	ldr	r3, [pc, #408]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cac:	4964      	ldr	r1, [pc, #400]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d017      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	4959      	ldr	r1, [pc, #356]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ce8:	d101      	bne.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d017      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d06:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	494a      	ldr	r1, [pc, #296]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d24:	d101      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 808b 	beq.w	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	4a39      	ldr	r2, [pc, #228]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d78:	f7fe ff5e 	bl	8000c38 <HAL_GetTick>
 8001d7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7fe ff5a 	bl	8000c38 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e357      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d9e:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d035      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d02e      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d114      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe ff22 	bl	8000c38 <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7fe ff1e 	bl	8000c38 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e319      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e26:	d111      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e36:	400b      	ands	r3, r1
 8001e38:	4901      	ldr	r1, [pc, #4]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000
 8001e48:	0ffffcff 	.word	0x0ffffcff
 8001e4c:	4baa      	ldr	r3, [pc, #680]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4aa9      	ldr	r2, [pc, #676]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e56:	6093      	str	r3, [r2, #8]
 8001e58:	4ba7      	ldr	r3, [pc, #668]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	49a4      	ldr	r1, [pc, #656]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d010      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e76:	4ba0      	ldr	r3, [pc, #640]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e7c:	4a9e      	ldr	r2, [pc, #632]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e86:	4b9c      	ldr	r3, [pc, #624]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	4999      	ldr	r1, [pc, #612]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ea4:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eb2:	4991      	ldr	r1, [pc, #580]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ec6:	4b8c      	ldr	r3, [pc, #560]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ed4:	4988      	ldr	r1, [pc, #544]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ee8:	4b83      	ldr	r3, [pc, #524]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef6:	4980      	ldr	r1, [pc, #512]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f0a:	4b7b      	ldr	r3, [pc, #492]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	4977      	ldr	r1, [pc, #476]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2c:	4b72      	ldr	r3, [pc, #456]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	496f      	ldr	r1, [pc, #444]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	f023 020c 	bic.w	r2, r3, #12
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5c:	4966      	ldr	r1, [pc, #408]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f70:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	495e      	ldr	r1, [pc, #376]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f92:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	4955      	ldr	r1, [pc, #340]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	494d      	ldr	r1, [pc, #308]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fd6:	4b48      	ldr	r3, [pc, #288]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4944      	ldr	r1, [pc, #272]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	493c      	ldr	r1, [pc, #240]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002028:	4933      	ldr	r1, [pc, #204]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800204a:	492b      	ldr	r1, [pc, #172]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d011      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800206c:	4922      	ldr	r1, [pc, #136]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ac:	4912      	ldr	r1, [pc, #72]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020d0:	4909      	ldr	r1, [pc, #36]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d006      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80d9 	beq.w	800229e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a01      	ldr	r2, [pc, #4]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020f6:	e001      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020fe:	f7fe fd9b 	bl	8000c38 <HAL_GetTick>
 8002102:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002106:	f7fe fd97 	bl	8000c38 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e194      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002118:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d021      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11d      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002138:	4b64      	ldr	r3, [pc, #400]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800213a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800213e:	0c1b      	lsrs	r3, r3, #16
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002146:	4b61      	ldr	r3, [pc, #388]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800214c:	0e1b      	lsrs	r3, r3, #24
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	019a      	lsls	r2, r3, #6
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	071b      	lsls	r3, r3, #28
 800216c:	4957      	ldr	r1, [pc, #348]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002192:	2b00      	cmp	r3, #0
 8002194:	d02e      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219e:	d129      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021a0:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b4:	0f1b      	lsrs	r3, r3, #28
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	019a      	lsls	r2, r3, #6
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	071b      	lsls	r3, r3, #28
 80021d4:	493d      	ldr	r1, [pc, #244]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e2:	f023 021f 	bic.w	r2, r3, #31
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	4937      	ldr	r1, [pc, #220]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01d      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002200:	4b32      	ldr	r3, [pc, #200]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002206:	0e1b      	lsrs	r3, r3, #24
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002214:	0f1b      	lsrs	r3, r3, #28
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	019a      	lsls	r2, r3, #6
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	431a      	orrs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	071b      	lsls	r3, r3, #28
 8002234:	4925      	ldr	r1, [pc, #148]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d011      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	019a      	lsls	r2, r3, #6
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	071b      	lsls	r3, r3, #28
 8002264:	4919      	ldr	r1, [pc, #100]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002278:	f7fe fcde 	bl	8000c38 <HAL_GetTick>
 800227c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002280:	f7fe fcda 	bl	8000c38 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0d7      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	f040 80cd 	bne.w	8002440 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a08      	ldr	r2, [pc, #32]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b2:	f7fe fcc1 	bl	8000c38 <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022ba:	f7fe fcbd 	bl	8000c38 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	; 0x64
 80022c6:	d903      	bls.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0ba      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80022cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022d0:	4b5e      	ldr	r3, [pc, #376]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022dc:	d0ed      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d02e      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d12a      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002306:	4b51      	ldr	r3, [pc, #324]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002314:	4b4d      	ldr	r3, [pc, #308]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	0f1b      	lsrs	r3, r3, #28
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	019a      	lsls	r2, r3, #6
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	061b      	lsls	r3, r3, #24
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	071b      	lsls	r3, r3, #28
 800233a:	4944      	ldr	r1, [pc, #272]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002348:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	493d      	ldr	r1, [pc, #244]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d022      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800236c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002370:	d11d      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002372:	4b36      	ldr	r3, [pc, #216]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	0e1b      	lsrs	r3, r3, #24
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	0f1b      	lsrs	r3, r3, #28
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	019a      	lsls	r2, r3, #6
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	071b      	lsls	r3, r3, #28
 80023a6:	4929      	ldr	r1, [pc, #164]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d028      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	0e1b      	lsrs	r3, r3, #24
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	019a      	lsls	r2, r3, #6
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	071b      	lsls	r3, r3, #28
 80023ee:	4917      	ldr	r1, [pc, #92]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	4911      	ldr	r1, [pc, #68]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7fe fc0e 	bl	8000c38 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002420:	f7fe fc0a 	bl	8000c38 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e007      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800243a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243e:	d1ef      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3720      	adds	r7, #32
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e049      	b.n	80024f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f841 	bl	80024fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 fa00 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e054      	b.n	80025d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d022      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x80>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d01d      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x80>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d018      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x80>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d013      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x80>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00e      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x80>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x80>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x80>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <HAL_TIM_Base_Start_IT+0xe8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d115      	bne.n	80025c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_TIM_Base_Start_IT+0xec>)
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d015      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0xbe>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d011      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025be:	e008      	b.n	80025d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e000      	b.n	80025d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40000800 	.word	0x40000800
 80025f0:	40000c00 	.word	0x40000c00
 80025f4:	40010400 	.word	0x40010400
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40001800 	.word	0x40001800
 8002600:	00010007 	.word	0x00010007

08002604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d122      	bne.n	8002660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	d11b      	bne.n	8002660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0202 	mvn.w	r2, #2
 8002630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f905 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f8f7 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f908 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b04      	cmp	r3, #4
 800266c:	d122      	bne.n	80026b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b04      	cmp	r3, #4
 800267a:	d11b      	bne.n	80026b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0204 	mvn.w	r2, #4
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8db 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8cd 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f8de 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d122      	bne.n	8002708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d11b      	bne.n	8002708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0208 	mvn.w	r2, #8
 80026d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2204      	movs	r2, #4
 80026de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8b1 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80026f4:	e005      	b.n	8002702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8a3 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f8b4 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b10      	cmp	r3, #16
 8002714:	d122      	bne.n	800275c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b10      	cmp	r3, #16
 8002722:	d11b      	bne.n	800275c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0210 	mvn.w	r2, #16
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2208      	movs	r2, #8
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f887 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f879 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f88a 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d107      	bne.n	8002788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0201 	mvn.w	r2, #1
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe f8ba 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b80      	cmp	r3, #128	; 0x80
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a0:	2b80      	cmp	r3, #128	; 0x80
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f91a 	bl	80029e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c2:	d10e      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b80      	cmp	r3, #128	; 0x80
 80027d0:	d107      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f90d 	bl	80029fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d10e      	bne.n	800280e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d107      	bne.n	800280e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f838 	bl	800287e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d10e      	bne.n	800283a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b20      	cmp	r3, #32
 8002828:	d107      	bne.n	800283a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f06f 0220 	mvn.w	r2, #32
 8002832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8cd 	bl	80029d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <TIM_Base_SetConfig+0x114>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d00f      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3d      	ldr	r2, [pc, #244]	; (80029ac <TIM_Base_SetConfig+0x118>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <TIM_Base_SetConfig+0x11c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <TIM_Base_SetConfig+0x120>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3a      	ldr	r2, [pc, #232]	; (80029b8 <TIM_Base_SetConfig+0x124>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <TIM_Base_SetConfig+0x114>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d027      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2c      	ldr	r2, [pc, #176]	; (80029ac <TIM_Base_SetConfig+0x118>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d023      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2b      	ldr	r2, [pc, #172]	; (80029b0 <TIM_Base_SetConfig+0x11c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2a      	ldr	r2, [pc, #168]	; (80029b4 <TIM_Base_SetConfig+0x120>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <TIM_Base_SetConfig+0x124>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d017      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a28      	ldr	r2, [pc, #160]	; (80029bc <TIM_Base_SetConfig+0x128>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <TIM_Base_SetConfig+0x12c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <TIM_Base_SetConfig+0x130>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a25      	ldr	r2, [pc, #148]	; (80029c8 <TIM_Base_SetConfig+0x134>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <TIM_Base_SetConfig+0x138>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <TIM_Base_SetConfig+0x13c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <TIM_Base_SetConfig+0x114>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d003      	beq.n	800298c <TIM_Base_SetConfig+0xf8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <TIM_Base_SetConfig+0x124>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d103      	bne.n	8002994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	615a      	str	r2, [r3, #20]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40010400 	.word	0x40010400
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800
 80029c8:	40001800 	.word	0x40001800
 80029cc:	40001c00 	.word	0x40001c00
 80029d0:	40002000 	.word	0x40002000

080029d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e040      	b.n	8002aa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd ffa2 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2224      	movs	r2, #36	; 0x24
 8002a3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fbe6 	bl	8003220 <UART_SetConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e022      	b.n	8002aa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fe3e 	bl	80036e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fec5 	bl	800382c <UART_CheckIdleState>
 8002aa2:	4603      	mov	r3, r0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d171      	bne.n	8002ba8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_UART_Transmit+0x24>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e06a      	b.n	8002baa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2221      	movs	r2, #33	; 0x21
 8002ae0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe f8a9 	bl	8000c38 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d108      	bne.n	8002b14 <HAL_UART_Transmit+0x68>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e003      	b.n	8002b1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b1c:	e02c      	b.n	8002b78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 feb6 	bl	800389a <UART_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e038      	b.n	8002baa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3302      	adds	r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e007      	b.n	8002b66 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3301      	adds	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1cc      	bne.n	8002b1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2140      	movs	r1, #64	; 0x40
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fe83 	bl	800389a <UART_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e005      	b.n	8002baa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b08a      	sub	sp, #40	; 0x28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d132      	bne.n	8002c30 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_UART_Receive_IT+0x24>
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e02b      	b.n	8002c32 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	e853 3f00 	ldrex	r3, [r3]
 8002bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	623b      	str	r3, [r7, #32]
 8002c0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	69f9      	ldr	r1, [r7, #28]
 8002c12:	6a3a      	ldr	r2, [r7, #32]
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e6      	bne.n	8002bee <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fefe 	bl	8003a28 <UART_Start_Receive_IT>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3728      	adds	r7, #40	; 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b0ba      	sub	sp, #232	; 0xe8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d115      	bne.n	8002ca4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00f      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8297 	beq.w	80031c8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
      }
      return;
 8002ca2:	e291      	b.n	80031c8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8117 	beq.w	8002edc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cbe:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <HAL_UART_IRQHandler+0x298>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 810a 	beq.w	8002edc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d011      	beq.n	8002cf8 <HAL_UART_IRQHandler+0xbc>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d011      	beq.n	8002d28 <HAL_UART_IRQHandler+0xec>
 8002d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2202      	movs	r2, #2
 8002d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1e:	f043 0204 	orr.w	r2, r3, #4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d011      	beq.n	8002d58 <HAL_UART_IRQHandler+0x11c>
 8002d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2204      	movs	r2, #4
 8002d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d017      	beq.n	8002d94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2208      	movs	r2, #8
 8002d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8a:	f043 0208 	orr.w	r2, r3, #8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d012      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x18a>
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00c      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 81fd 	beq.w	80031cc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b40      	cmp	r3, #64	; 0x40
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04f      	beq.n	8002ebe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fec8 	bl	8003bb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d141      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3308      	adds	r3, #8
 8002e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3308      	adds	r3, #8
 8002e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1d9      	bne.n	8002e32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d013      	beq.n	8002eae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8a:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <HAL_UART_IRQHandler+0x29c>)
 8002e8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f82e 	bl	8000ef4 <HAL_DMA_Abort_IT>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d017      	beq.n	8002ece <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	e00f      	b.n	8002ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9a0 	bl	80031f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e00b      	b.n	8002ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f99c 	bl	80031f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	e007      	b.n	8002ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f998 	bl	80031f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ecc:	e17e      	b.n	80031cc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ece:	bf00      	nop
    return;
 8002ed0:	e17c      	b.n	80031cc <HAL_UART_IRQHandler+0x590>
 8002ed2:	bf00      	nop
 8002ed4:	04000120 	.word	0x04000120
 8002ed8:	08003c7d 	.word	0x08003c7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	f040 814c 	bne.w	800317e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8145 	beq.w	800317e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 813e 	beq.w	800317e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2210      	movs	r2, #16
 8002f08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	f040 80b6 	bne.w	8003086 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8150 	beq.w	80031d0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	f080 8148 	bcs.w	80031d0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f54:	f000 8086 	beq.w	8003064 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1da      	bne.n	8002f58 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e1      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003002:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003004:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003008:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800300a:	e841 2300 	strex	r3, r2, [r1]
 800300e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1e3      	bne.n	8002fde <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003034:	f023 0310 	bic.w	r3, r3, #16
 8003038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003046:	65bb      	str	r3, [r7, #88]	; 0x58
 8003048:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800304c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e4      	bne.n	8003024 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fed8 	bl	8000e14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003076:	b29b      	uxth	r3, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	b29b      	uxth	r3, r3
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8c2 	bl	8003208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003084:	e0a4      	b.n	80031d0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003092:	b29b      	uxth	r3, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8096 	beq.w	80031d4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80030a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8091 	beq.w	80031d4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
 80030d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e4      	bne.n	80030b2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3308      	adds	r3, #8
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	623b      	str	r3, [r7, #32]
   return(result);
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3308      	adds	r3, #8
 8003108:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800310c:	633a      	str	r2, [r7, #48]	; 0x30
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e3      	bne.n	80030e8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	60fb      	str	r3, [r7, #12]
   return(result);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f023 0310 	bic.w	r3, r3, #16
 8003148:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	617b      	str	r3, [r7, #20]
   return(result);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e4      	bne.n	8003134 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f846 	bl	8003208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800317c:	e02a      	b.n	80031d4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00e      	beq.n	80031a8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800318a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01c      	beq.n	80031d8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
    }
    return;
 80031a6:	e017      	b.n	80031d8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <HAL_UART_IRQHandler+0x59e>
 80031b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00c      	beq.n	80031da <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fd71 	bl	8003ca8 <UART_EndTransmit_IT>
    return;
 80031c6:	e008      	b.n	80031da <HAL_UART_IRQHandler+0x59e>
      return;
 80031c8:	bf00      	nop
 80031ca:	e006      	b.n	80031da <HAL_UART_IRQHandler+0x59e>
    return;
 80031cc:	bf00      	nop
 80031ce:	e004      	b.n	80031da <HAL_UART_IRQHandler+0x59e>
      return;
 80031d0:	bf00      	nop
 80031d2:	e002      	b.n	80031da <HAL_UART_IRQHandler+0x59e>
      return;
 80031d4:	bf00      	nop
 80031d6:	e000      	b.n	80031da <HAL_UART_IRQHandler+0x59e>
    return;
 80031d8:	bf00      	nop
  }

}
 80031da:	37e8      	adds	r7, #232	; 0xe8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4ba6      	ldr	r3, [pc, #664]	; (80034e4 <UART_SetConfig+0x2c4>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	6979      	ldr	r1, [r7, #20]
 8003254:	430b      	orrs	r3, r1
 8003256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a94      	ldr	r2, [pc, #592]	; (80034e8 <UART_SetConfig+0x2c8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d120      	bne.n	80032de <UART_SetConfig+0xbe>
 800329c:	4b93      	ldr	r3, [pc, #588]	; (80034ec <UART_SetConfig+0x2cc>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d816      	bhi.n	80032d8 <UART_SetConfig+0xb8>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <UART_SetConfig+0x90>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032cd 	.word	0x080032cd
 80032b8:	080032c7 	.word	0x080032c7
 80032bc:	080032d3 	.word	0x080032d3
 80032c0:	2301      	movs	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e150      	b.n	8003568 <UART_SetConfig+0x348>
 80032c6:	2302      	movs	r3, #2
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e14d      	b.n	8003568 <UART_SetConfig+0x348>
 80032cc:	2304      	movs	r3, #4
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e14a      	b.n	8003568 <UART_SetConfig+0x348>
 80032d2:	2308      	movs	r3, #8
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e147      	b.n	8003568 <UART_SetConfig+0x348>
 80032d8:	2310      	movs	r3, #16
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e144      	b.n	8003568 <UART_SetConfig+0x348>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a83      	ldr	r2, [pc, #524]	; (80034f0 <UART_SetConfig+0x2d0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d132      	bne.n	800334e <UART_SetConfig+0x12e>
 80032e8:	4b80      	ldr	r3, [pc, #512]	; (80034ec <UART_SetConfig+0x2cc>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d828      	bhi.n	8003348 <UART_SetConfig+0x128>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <UART_SetConfig+0xdc>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003349 	.word	0x08003349
 8003304:	08003349 	.word	0x08003349
 8003308:	08003349 	.word	0x08003349
 800330c:	0800333d 	.word	0x0800333d
 8003310:	08003349 	.word	0x08003349
 8003314:	08003349 	.word	0x08003349
 8003318:	08003349 	.word	0x08003349
 800331c:	08003337 	.word	0x08003337
 8003320:	08003349 	.word	0x08003349
 8003324:	08003349 	.word	0x08003349
 8003328:	08003349 	.word	0x08003349
 800332c:	08003343 	.word	0x08003343
 8003330:	2300      	movs	r3, #0
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e118      	b.n	8003568 <UART_SetConfig+0x348>
 8003336:	2302      	movs	r3, #2
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e115      	b.n	8003568 <UART_SetConfig+0x348>
 800333c:	2304      	movs	r3, #4
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e112      	b.n	8003568 <UART_SetConfig+0x348>
 8003342:	2308      	movs	r3, #8
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e10f      	b.n	8003568 <UART_SetConfig+0x348>
 8003348:	2310      	movs	r3, #16
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e10c      	b.n	8003568 <UART_SetConfig+0x348>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <UART_SetConfig+0x2d4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d120      	bne.n	800339a <UART_SetConfig+0x17a>
 8003358:	4b64      	ldr	r3, [pc, #400]	; (80034ec <UART_SetConfig+0x2cc>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003362:	2b30      	cmp	r3, #48	; 0x30
 8003364:	d013      	beq.n	800338e <UART_SetConfig+0x16e>
 8003366:	2b30      	cmp	r3, #48	; 0x30
 8003368:	d814      	bhi.n	8003394 <UART_SetConfig+0x174>
 800336a:	2b20      	cmp	r3, #32
 800336c:	d009      	beq.n	8003382 <UART_SetConfig+0x162>
 800336e:	2b20      	cmp	r3, #32
 8003370:	d810      	bhi.n	8003394 <UART_SetConfig+0x174>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <UART_SetConfig+0x15c>
 8003376:	2b10      	cmp	r3, #16
 8003378:	d006      	beq.n	8003388 <UART_SetConfig+0x168>
 800337a:	e00b      	b.n	8003394 <UART_SetConfig+0x174>
 800337c:	2300      	movs	r3, #0
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e0f2      	b.n	8003568 <UART_SetConfig+0x348>
 8003382:	2302      	movs	r3, #2
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e0ef      	b.n	8003568 <UART_SetConfig+0x348>
 8003388:	2304      	movs	r3, #4
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e0ec      	b.n	8003568 <UART_SetConfig+0x348>
 800338e:	2308      	movs	r3, #8
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e0e9      	b.n	8003568 <UART_SetConfig+0x348>
 8003394:	2310      	movs	r3, #16
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e0e6      	b.n	8003568 <UART_SetConfig+0x348>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a56      	ldr	r2, [pc, #344]	; (80034f8 <UART_SetConfig+0x2d8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d120      	bne.n	80033e6 <UART_SetConfig+0x1c6>
 80033a4:	4b51      	ldr	r3, [pc, #324]	; (80034ec <UART_SetConfig+0x2cc>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033ae:	2bc0      	cmp	r3, #192	; 0xc0
 80033b0:	d013      	beq.n	80033da <UART_SetConfig+0x1ba>
 80033b2:	2bc0      	cmp	r3, #192	; 0xc0
 80033b4:	d814      	bhi.n	80033e0 <UART_SetConfig+0x1c0>
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d009      	beq.n	80033ce <UART_SetConfig+0x1ae>
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d810      	bhi.n	80033e0 <UART_SetConfig+0x1c0>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <UART_SetConfig+0x1a8>
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d006      	beq.n	80033d4 <UART_SetConfig+0x1b4>
 80033c6:	e00b      	b.n	80033e0 <UART_SetConfig+0x1c0>
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0cc      	b.n	8003568 <UART_SetConfig+0x348>
 80033ce:	2302      	movs	r3, #2
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e0c9      	b.n	8003568 <UART_SetConfig+0x348>
 80033d4:	2304      	movs	r3, #4
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e0c6      	b.n	8003568 <UART_SetConfig+0x348>
 80033da:	2308      	movs	r3, #8
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e0c3      	b.n	8003568 <UART_SetConfig+0x348>
 80033e0:	2310      	movs	r3, #16
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e0c0      	b.n	8003568 <UART_SetConfig+0x348>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a44      	ldr	r2, [pc, #272]	; (80034fc <UART_SetConfig+0x2dc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d125      	bne.n	800343c <UART_SetConfig+0x21c>
 80033f0:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <UART_SetConfig+0x2cc>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fe:	d017      	beq.n	8003430 <UART_SetConfig+0x210>
 8003400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003404:	d817      	bhi.n	8003436 <UART_SetConfig+0x216>
 8003406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340a:	d00b      	beq.n	8003424 <UART_SetConfig+0x204>
 800340c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003410:	d811      	bhi.n	8003436 <UART_SetConfig+0x216>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <UART_SetConfig+0x1fe>
 8003416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341a:	d006      	beq.n	800342a <UART_SetConfig+0x20a>
 800341c:	e00b      	b.n	8003436 <UART_SetConfig+0x216>
 800341e:	2300      	movs	r3, #0
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e0a1      	b.n	8003568 <UART_SetConfig+0x348>
 8003424:	2302      	movs	r3, #2
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e09e      	b.n	8003568 <UART_SetConfig+0x348>
 800342a:	2304      	movs	r3, #4
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e09b      	b.n	8003568 <UART_SetConfig+0x348>
 8003430:	2308      	movs	r3, #8
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e098      	b.n	8003568 <UART_SetConfig+0x348>
 8003436:	2310      	movs	r3, #16
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e095      	b.n	8003568 <UART_SetConfig+0x348>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2f      	ldr	r2, [pc, #188]	; (8003500 <UART_SetConfig+0x2e0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d125      	bne.n	8003492 <UART_SetConfig+0x272>
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <UART_SetConfig+0x2cc>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003454:	d017      	beq.n	8003486 <UART_SetConfig+0x266>
 8003456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800345a:	d817      	bhi.n	800348c <UART_SetConfig+0x26c>
 800345c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003460:	d00b      	beq.n	800347a <UART_SetConfig+0x25a>
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	d811      	bhi.n	800348c <UART_SetConfig+0x26c>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <UART_SetConfig+0x254>
 800346c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003470:	d006      	beq.n	8003480 <UART_SetConfig+0x260>
 8003472:	e00b      	b.n	800348c <UART_SetConfig+0x26c>
 8003474:	2301      	movs	r3, #1
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e076      	b.n	8003568 <UART_SetConfig+0x348>
 800347a:	2302      	movs	r3, #2
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e073      	b.n	8003568 <UART_SetConfig+0x348>
 8003480:	2304      	movs	r3, #4
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e070      	b.n	8003568 <UART_SetConfig+0x348>
 8003486:	2308      	movs	r3, #8
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e06d      	b.n	8003568 <UART_SetConfig+0x348>
 800348c:	2310      	movs	r3, #16
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e06a      	b.n	8003568 <UART_SetConfig+0x348>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <UART_SetConfig+0x2e4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d138      	bne.n	800350e <UART_SetConfig+0x2ee>
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <UART_SetConfig+0x2cc>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034aa:	d017      	beq.n	80034dc <UART_SetConfig+0x2bc>
 80034ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b0:	d82a      	bhi.n	8003508 <UART_SetConfig+0x2e8>
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b6:	d00b      	beq.n	80034d0 <UART_SetConfig+0x2b0>
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	d824      	bhi.n	8003508 <UART_SetConfig+0x2e8>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <UART_SetConfig+0x2aa>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d006      	beq.n	80034d6 <UART_SetConfig+0x2b6>
 80034c8:	e01e      	b.n	8003508 <UART_SetConfig+0x2e8>
 80034ca:	2300      	movs	r3, #0
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e04b      	b.n	8003568 <UART_SetConfig+0x348>
 80034d0:	2302      	movs	r3, #2
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e048      	b.n	8003568 <UART_SetConfig+0x348>
 80034d6:	2304      	movs	r3, #4
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e045      	b.n	8003568 <UART_SetConfig+0x348>
 80034dc:	2308      	movs	r3, #8
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e042      	b.n	8003568 <UART_SetConfig+0x348>
 80034e2:	bf00      	nop
 80034e4:	efff69f3 	.word	0xefff69f3
 80034e8:	40011000 	.word	0x40011000
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40004400 	.word	0x40004400
 80034f4:	40004800 	.word	0x40004800
 80034f8:	40004c00 	.word	0x40004c00
 80034fc:	40005000 	.word	0x40005000
 8003500:	40011400 	.word	0x40011400
 8003504:	40007800 	.word	0x40007800
 8003508:	2310      	movs	r3, #16
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e02c      	b.n	8003568 <UART_SetConfig+0x348>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a72      	ldr	r2, [pc, #456]	; (80036dc <UART_SetConfig+0x4bc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d125      	bne.n	8003564 <UART_SetConfig+0x344>
 8003518:	4b71      	ldr	r3, [pc, #452]	; (80036e0 <UART_SetConfig+0x4c0>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003522:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003526:	d017      	beq.n	8003558 <UART_SetConfig+0x338>
 8003528:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800352c:	d817      	bhi.n	800355e <UART_SetConfig+0x33e>
 800352e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003532:	d00b      	beq.n	800354c <UART_SetConfig+0x32c>
 8003534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003538:	d811      	bhi.n	800355e <UART_SetConfig+0x33e>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <UART_SetConfig+0x326>
 800353e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003542:	d006      	beq.n	8003552 <UART_SetConfig+0x332>
 8003544:	e00b      	b.n	800355e <UART_SetConfig+0x33e>
 8003546:	2300      	movs	r3, #0
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e00d      	b.n	8003568 <UART_SetConfig+0x348>
 800354c:	2302      	movs	r3, #2
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e00a      	b.n	8003568 <UART_SetConfig+0x348>
 8003552:	2304      	movs	r3, #4
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e007      	b.n	8003568 <UART_SetConfig+0x348>
 8003558:	2308      	movs	r3, #8
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e004      	b.n	8003568 <UART_SetConfig+0x348>
 800355e:	2310      	movs	r3, #16
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e001      	b.n	8003568 <UART_SetConfig+0x348>
 8003564:	2310      	movs	r3, #16
 8003566:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003570:	d15b      	bne.n	800362a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003572:	7ffb      	ldrb	r3, [r7, #31]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d828      	bhi.n	80035ca <UART_SetConfig+0x3aa>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <UART_SetConfig+0x360>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035ad 	.word	0x080035ad
 8003588:	080035b5 	.word	0x080035b5
 800358c:	080035cb 	.word	0x080035cb
 8003590:	080035bb 	.word	0x080035bb
 8003594:	080035cb 	.word	0x080035cb
 8003598:	080035cb 	.word	0x080035cb
 800359c:	080035cb 	.word	0x080035cb
 80035a0:	080035c3 	.word	0x080035c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7fe fb0a 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 80035a8:	61b8      	str	r0, [r7, #24]
        break;
 80035aa:	e013      	b.n	80035d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7fe fb1a 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 80035b0:	61b8      	str	r0, [r7, #24]
        break;
 80035b2:	e00f      	b.n	80035d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <UART_SetConfig+0x4c4>)
 80035b6:	61bb      	str	r3, [r7, #24]
        break;
 80035b8:	e00c      	b.n	80035d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ba:	f7fe fa2d 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80035be:	61b8      	str	r0, [r7, #24]
        break;
 80035c0:	e008      	b.n	80035d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c6:	61bb      	str	r3, [r7, #24]
        break;
 80035c8:	e004      	b.n	80035d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	77bb      	strb	r3, [r7, #30]
        break;
 80035d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d074      	beq.n	80036c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	005a      	lsls	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	441a      	add	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d916      	bls.n	8003624 <UART_SetConfig+0x404>
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d212      	bcs.n	8003624 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f023 030f 	bic.w	r3, r3, #15
 8003606:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	b29a      	uxth	r2, r3
 8003614:	89fb      	ldrh	r3, [r7, #14]
 8003616:	4313      	orrs	r3, r2
 8003618:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	89fa      	ldrh	r2, [r7, #14]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	e04f      	b.n	80036c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	77bb      	strb	r3, [r7, #30]
 8003628:	e04c      	b.n	80036c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800362a:	7ffb      	ldrb	r3, [r7, #31]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d828      	bhi.n	8003682 <UART_SetConfig+0x462>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0x418>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800365d 	.word	0x0800365d
 800363c:	08003665 	.word	0x08003665
 8003640:	0800366d 	.word	0x0800366d
 8003644:	08003683 	.word	0x08003683
 8003648:	08003673 	.word	0x08003673
 800364c:	08003683 	.word	0x08003683
 8003650:	08003683 	.word	0x08003683
 8003654:	08003683 	.word	0x08003683
 8003658:	0800367b 	.word	0x0800367b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7fe faae 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8003660:	61b8      	str	r0, [r7, #24]
        break;
 8003662:	e013      	b.n	800368c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003664:	f7fe fabe 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8003668:	61b8      	str	r0, [r7, #24]
        break;
 800366a:	e00f      	b.n	800368c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <UART_SetConfig+0x4c4>)
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e00c      	b.n	800368c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003672:	f7fe f9d1 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 8003676:	61b8      	str	r0, [r7, #24]
        break;
 8003678:	e008      	b.n	800368c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367e:	61bb      	str	r3, [r7, #24]
        break;
 8003680:	e004      	b.n	800368c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	77bb      	strb	r3, [r7, #30]
        break;
 800368a:	bf00      	nop
    }

    if (pclk != 0U)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d018      	beq.n	80036c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	085a      	lsrs	r2, r3, #1
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	441a      	add	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b0f      	cmp	r3, #15
 80036aa:	d909      	bls.n	80036c0 <UART_SetConfig+0x4a0>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d205      	bcs.n	80036c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	e001      	b.n	80036c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40007c00 	.word	0x40007c00
 80036e0:	40023800 	.word	0x40023800
 80036e4:	00f42400 	.word	0x00f42400

080036e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01a      	beq.n	80037fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e6:	d10a      	bne.n	80037fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
  }
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af02      	add	r7, sp, #8
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800383c:	f7fd f9fc 	bl	8000c38 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d10e      	bne.n	800386e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f81b 	bl	800389a <UART_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e011      	b.n	8003892 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b09c      	sub	sp, #112	; 0x70
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038aa:	e0a7      	b.n	80039fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	f000 80a3 	beq.w	80039fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b6:	f7fd f9bf 	bl	8000c38 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d302      	bcc.n	80038cc <UART_WaitOnFlagUntilTimeout+0x32>
 80038c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d13f      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e0:	667b      	str	r3, [r7, #100]	; 0x64
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e6      	bne.n	80038cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3308      	adds	r3, #8
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	663b      	str	r3, [r7, #96]	; 0x60
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800391e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800392c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e068      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d050      	beq.n	80039fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003968:	d148      	bne.n	80039fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003972:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003988:	66fb      	str	r3, [r7, #108]	; 0x6c
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
 8003994:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e6      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3308      	adds	r3, #8
 80039ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	613b      	str	r3, [r7, #16]
   return(result);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3308      	adds	r3, #8
 80039c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039c6:	623a      	str	r2, [r7, #32]
 80039c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	69f9      	ldr	r1, [r7, #28]
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e5      	bne.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e010      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4013      	ands	r3, r2
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	f43f af48 	beq.w	80038ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3770      	adds	r7, #112	; 0x70
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b097      	sub	sp, #92	; 0x5c
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5a:	d10e      	bne.n	8003a7a <UART_Start_Receive_IT+0x52>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <UART_Start_Receive_IT+0x48>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a6e:	e02d      	b.n	8003acc <UART_Start_Receive_IT+0xa4>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	22ff      	movs	r2, #255	; 0xff
 8003a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a78:	e028      	b.n	8003acc <UART_Start_Receive_IT+0xa4>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <UART_Start_Receive_IT+0x76>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <UART_Start_Receive_IT+0x6c>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	22ff      	movs	r2, #255	; 0xff
 8003a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a92:	e01b      	b.n	8003acc <UART_Start_Receive_IT+0xa4>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	227f      	movs	r2, #127	; 0x7f
 8003a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a9c:	e016      	b.n	8003acc <UART_Start_Receive_IT+0xa4>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aa6:	d10d      	bne.n	8003ac4 <UART_Start_Receive_IT+0x9c>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <UART_Start_Receive_IT+0x92>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	227f      	movs	r2, #127	; 0x7f
 8003ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ab8:	e008      	b.n	8003acc <UART_Start_Receive_IT+0xa4>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	223f      	movs	r2, #63	; 0x3f
 8003abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ac2:	e003      	b.n	8003acc <UART_Start_Receive_IT+0xa4>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2222      	movs	r2, #34	; 0x22
 8003ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	657b      	str	r3, [r7, #84]	; 0x54
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3308      	adds	r3, #8
 8003afa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003afc:	64ba      	str	r2, [r7, #72]	; 0x48
 8003afe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e5      	bne.n	8003adc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b18:	d107      	bne.n	8003b2a <UART_Start_Receive_IT+0x102>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a21      	ldr	r2, [pc, #132]	; (8003bac <UART_Start_Receive_IT+0x184>)
 8003b26:	669a      	str	r2, [r3, #104]	; 0x68
 8003b28:	e002      	b.n	8003b30 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <UART_Start_Receive_IT+0x188>)
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d019      	beq.n	8003b6c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e6      	bne.n	8003b38 <UART_Start_Receive_IT+0x110>
 8003b6a:	e018      	b.n	8003b9e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f043 0320 	orr.w	r3, r3, #32
 8003b80:	653b      	str	r3, [r7, #80]	; 0x50
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	69f9      	ldr	r1, [r7, #28]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e6      	bne.n	8003b6c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	375c      	adds	r7, #92	; 0x5c
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	08003e63 	.word	0x08003e63
 8003bb0:	08003cfd 	.word	0x08003cfd

08003bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b095      	sub	sp, #84	; 0x54
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bda:	643b      	str	r3, [r7, #64]	; 0x40
 8003bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e6      	bne.n	8003bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e5      	bne.n	8003bee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d118      	bne.n	8003c5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f023 0310 	bic.w	r3, r3, #16
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e6      	bne.n	8003c2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c70:	bf00      	nop
 8003c72:	3754      	adds	r7, #84	; 0x54
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff faaa 	bl	80031f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6979      	ldr	r1, [r7, #20]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	613b      	str	r3, [r7, #16]
   return(result);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e6      	bne.n	8003cb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fa76 	bl	80031e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf4:	bf00      	nop
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b096      	sub	sp, #88	; 0x58
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d0a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d14:	2b22      	cmp	r3, #34	; 0x22
 8003d16:	f040 8098 	bne.w	8003e4a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d28:	b2d9      	uxtb	r1, r3
 8003d2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	400a      	ands	r2, r1
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d17b      	bne.n	8003e5a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d76:	653b      	str	r3, [r7, #80]	; 0x50
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
 8003d82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	623b      	str	r3, [r7, #32]
   return(result);
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003db4:	633a      	str	r2, [r7, #48]	; 0x30
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e5      	bne.n	8003d94 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d12e      	bne.n	8003e42 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	69b9      	ldr	r1, [r7, #24]
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	617b      	str	r3, [r7, #20]
   return(result);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e6      	bne.n	8003dea <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d103      	bne.n	8003e32 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2210      	movs	r2, #16
 8003e30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff f9e4 	bl	8003208 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e40:	e00b      	b.n	8003e5a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fc fc9e 	bl	8000784 <HAL_UART_RxCpltCallback>
}
 8003e48:	e007      	b.n	8003e5a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0208 	orr.w	r2, r2, #8
 8003e58:	619a      	str	r2, [r3, #24]
}
 8003e5a:	bf00      	nop
 8003e5c:	3758      	adds	r7, #88	; 0x58
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b096      	sub	sp, #88	; 0x58
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e7a:	2b22      	cmp	r3, #34	; 0x22
 8003e7c:	f040 8098 	bne.w	8003fb0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e90:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003e94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d17b      	bne.n	8003fc0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d12e      	bne.n	8003fa8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 0310 	bic.w	r3, r3, #16
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6979      	ldr	r1, [r7, #20]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e6      	bne.n	8003f50 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d103      	bne.n	8003f98 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2210      	movs	r2, #16
 8003f96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff f931 	bl	8003208 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fa6:	e00b      	b.n	8003fc0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fc fbeb 	bl	8000784 <HAL_UART_RxCpltCallback>
}
 8003fae:	e007      	b.n	8003fc0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	619a      	str	r2, [r3, #24]
}
 8003fc0:	bf00      	nop
 8003fc2:	3758      	adds	r7, #88	; 0x58
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fde:	f3ef 8305 	mrs	r3, IPSR
 8003fe2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fea:	f3ef 8310 	mrs	r3, PRIMASK
 8003fee:	607b      	str	r3, [r7, #4]
  return(result);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8003ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <osKernelInitialize+0x3a>
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <osKernelInitialize+0x64>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d103      	bne.n	8004012 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800400a:	f06f 0305 	mvn.w	r3, #5
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e00c      	b.n	800402c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <osKernelInitialize+0x64>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d105      	bne.n	8004026 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <osKernelInitialize+0x64>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e002      	b.n	800402c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800402c:	68fb      	ldr	r3, [r7, #12]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	2000011c 	.word	0x2000011c

08004040 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004046:	f3ef 8305 	mrs	r3, IPSR
 800404a:	60bb      	str	r3, [r7, #8]
  return(result);
 800404c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004052:	f3ef 8310 	mrs	r3, PRIMASK
 8004056:	607b      	str	r3, [r7, #4]
  return(result);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800405e:	f3ef 8311 	mrs	r3, BASEPRI
 8004062:	603b      	str	r3, [r7, #0]
  return(result);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <osKernelStart+0x3a>
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <osKernelStart+0x68>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d103      	bne.n	800407a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004072:	f06f 0305 	mvn.w	r3, #5
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e010      	b.n	800409c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <osKernelStart+0x68>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d109      	bne.n	8004096 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004082:	f7ff ffa1 	bl	8003fc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004086:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <osKernelStart+0x68>)
 8004088:	2202      	movs	r2, #2
 800408a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800408c:	f001 f8b4 	bl	80051f8 <vTaskStartScheduler>
      stat = osOK;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	e002      	b.n	800409c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800409c:	68fb      	ldr	r3, [r7, #12]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	2000011c 	.word	0x2000011c

080040ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b090      	sub	sp, #64	; 0x40
 80040b0:	af04      	add	r7, sp, #16
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040bc:	f3ef 8305 	mrs	r3, IPSR
 80040c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80040c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f040 808f 	bne.w	80041e8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040d6:	f3ef 8311 	mrs	r3, BASEPRI
 80040da:	617b      	str	r3, [r7, #20]
  return(result);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <osThreadNew+0x3e>
 80040e2:	4b44      	ldr	r3, [pc, #272]	; (80041f4 <osThreadNew+0x148>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d07e      	beq.n	80041e8 <osThreadNew+0x13c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d07b      	beq.n	80041e8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80040f4:	2318      	movs	r3, #24
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80040fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004100:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d045      	beq.n	8004194 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <osThreadNew+0x6a>
        name = attr->name;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <osThreadNew+0x90>
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	2b38      	cmp	r3, #56	; 0x38
 800412e:	d805      	bhi.n	800413c <osThreadNew+0x90>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <osThreadNew+0x94>
        return (NULL);
 800413c:	2300      	movs	r3, #0
 800413e:	e054      	b.n	80041ea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <osThreadNew+0xca>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b5b      	cmp	r3, #91	; 0x5b
 800415e:	d90a      	bls.n	8004176 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <osThreadNew+0xca>
        mem = 1;
 8004170:	2301      	movs	r3, #1
 8004172:	623b      	str	r3, [r7, #32]
 8004174:	e010      	b.n	8004198 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10c      	bne.n	8004198 <osThreadNew+0xec>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <osThreadNew+0xec>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d104      	bne.n	8004198 <osThreadNew+0xec>
          mem = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	e001      	b.n	8004198 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d110      	bne.n	80041c0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041a6:	9202      	str	r2, [sp, #8]
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fe3f 	bl	8004e38 <xTaskCreateStatic>
 80041ba:	4603      	mov	r3, r0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	e013      	b.n	80041e8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d110      	bne.n	80041e8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	f107 0310 	add.w	r3, r7, #16
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fe90 	bl	8004efe <xTaskCreate>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <osThreadNew+0x13c>
          hTask = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041e8:	693b      	ldr	r3, [r7, #16]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3730      	adds	r7, #48	; 0x30
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	2000011c 	.word	0x2000011c

080041f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004200:	f3ef 8305 	mrs	r3, IPSR
 8004204:	613b      	str	r3, [r7, #16]
  return(result);
 8004206:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10f      	bne.n	800422c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420c:	f3ef 8310 	mrs	r3, PRIMASK
 8004210:	60fb      	str	r3, [r7, #12]
  return(result);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004218:	f3ef 8311 	mrs	r3, BASEPRI
 800421c:	60bb      	str	r3, [r7, #8]
  return(result);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <osDelay+0x3c>
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <osDelay+0x58>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d103      	bne.n	8004234 <osDelay+0x3c>
    stat = osErrorISR;
 800422c:	f06f 0305 	mvn.w	r3, #5
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e007      	b.n	8004244 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <osDelay+0x4c>
      vTaskDelay(ticks);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 ffa4 	bl	800518c <vTaskDelay>
    }
  }

  return (stat);
 8004244:	697b      	ldr	r3, [r7, #20]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	2000011c 	.word	0x2000011c

08004254 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <vApplicationGetIdleTaskMemory+0x2c>)
 8004264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4a06      	ldr	r2, [pc, #24]	; (8004284 <vApplicationGetIdleTaskMemory+0x30>)
 800426a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2280      	movs	r2, #128	; 0x80
 8004270:	601a      	str	r2, [r3, #0]
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000120 	.word	0x20000120
 8004284:	2000017c 	.word	0x2000017c

08004288 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004298:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4a06      	ldr	r2, [pc, #24]	; (80042b8 <vApplicationGetTimerTaskMemory+0x30>)
 800429e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	2000037c 	.word	0x2000037c
 80042b8:	200003d8 	.word	0x200003d8

080042bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f103 0208 	add.w	r2, r3, #8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295
 80042d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f103 0208 	add.w	r2, r3, #8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f103 0208 	add.w	r2, r3, #8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004316:	b480      	push	{r7}
 8004318:	b085      	sub	sp, #20
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d103      	bne.n	800437e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	e00c      	b.n	8004398 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3308      	adds	r3, #8
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e002      	b.n	800438c <vListInsert+0x2e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	429a      	cmp	r2, r3
 8004396:	d2f6      	bcs.n	8004386 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6892      	ldr	r2, [r2, #8]
 80043e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6852      	ldr	r2, [r2, #4]
 80043f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d103      	bne.n	8004404 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1e5a      	subs	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10c      	bne.n	8004452 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	b672      	cpsid	i
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	b662      	cpsie	i
 800444c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004452:	f002 f87b 	bl	800654c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	441a      	add	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	3b01      	subs	r3, #1
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	441a      	add	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d114      	bne.n	80044d2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3310      	adds	r3, #16
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 f937 	bl	8005728 <xTaskRemoveFromEventList>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d012      	beq.n	80044e6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <xQueueGenericReset+0xd0>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	e009      	b.n	80044e6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3310      	adds	r3, #16
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fef0 	bl	80042bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3324      	adds	r3, #36	; 0x24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff feeb 	bl	80042bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044e6:	f002 f865 	bl	80065b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044ea:	2301      	movs	r3, #1
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08e      	sub	sp, #56	; 0x38
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10c      	bne.n	8004526 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	b672      	cpsid	i
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	b662      	cpsie	i
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10c      	bne.n	8004546 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	b672      	cpsid	i
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	b662      	cpsie	i
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <xQueueGenericCreateStatic+0x5a>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <xQueueGenericCreateStatic+0x5e>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <xQueueGenericCreateStatic+0x60>
 8004556:	2300      	movs	r3, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	b672      	cpsid	i
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	b662      	cpsie	i
 8004570:	623b      	str	r3, [r7, #32]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <xQueueGenericCreateStatic+0x8a>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <xQueueGenericCreateStatic+0x8e>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <xQueueGenericCreateStatic+0x90>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10c      	bne.n	80045a6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	b672      	cpsid	i
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	b662      	cpsie	i
 80045a0:	61fb      	str	r3, [r7, #28]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045a6:	2350      	movs	r3, #80	; 0x50
 80045a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b50      	cmp	r3, #80	; 0x50
 80045ae:	d00c      	beq.n	80045ca <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	b672      	cpsid	i
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	b662      	cpsie	i
 80045c4:	61bb      	str	r3, [r7, #24]
}
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f805 	bl	80045fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3730      	adds	r7, #48	; 0x30
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d103      	bne.n	8004618 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e002      	b.n	800461e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800462a:	2101      	movs	r1, #1
 800462c:	69b8      	ldr	r0, [r7, #24]
 800462e:	f7ff fef9 	bl	8004424 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08e      	sub	sp, #56	; 0x38
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004652:	2300      	movs	r3, #0
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10c      	bne.n	800467a <xQueueGenericSend+0x36>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	b672      	cpsid	i
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	b662      	cpsie	i
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d103      	bne.n	8004688 <xQueueGenericSend+0x44>
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <xQueueGenericSend+0x48>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <xQueueGenericSend+0x4a>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10c      	bne.n	80046ac <xQueueGenericSend+0x68>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	b672      	cpsid	i
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	b662      	cpsie	i
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d103      	bne.n	80046ba <xQueueGenericSend+0x76>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <xQueueGenericSend+0x7a>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <xQueueGenericSend+0x7c>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10c      	bne.n	80046de <xQueueGenericSend+0x9a>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	b672      	cpsid	i
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	b662      	cpsie	i
 80046d8:	623b      	str	r3, [r7, #32]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046de:	f001 f9e9 	bl	8005ab4 <xTaskGetSchedulerState>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <xQueueGenericSend+0xaa>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <xQueueGenericSend+0xae>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <xQueueGenericSend+0xb0>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10c      	bne.n	8004712 <xQueueGenericSend+0xce>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	b672      	cpsid	i
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	b662      	cpsie	i
 800470c:	61fb      	str	r3, [r7, #28]
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004712:	f001 ff1b 	bl	800654c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <xQueueGenericSend+0xe4>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d129      	bne.n	800477c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800472e:	f000 fa15 	bl	8004b5c <prvCopyDataToQueue>
 8004732:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	2b00      	cmp	r3, #0
 800473a:	d010      	beq.n	800475e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	3324      	adds	r3, #36	; 0x24
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fff1 	bl	8005728 <xTaskRemoveFromEventList>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800474c:	4b3f      	ldr	r3, [pc, #252]	; (800484c <xQueueGenericSend+0x208>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	e00a      	b.n	8004774 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004764:	4b39      	ldr	r3, [pc, #228]	; (800484c <xQueueGenericSend+0x208>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004774:	f001 ff1e 	bl	80065b4 <vPortExitCritical>
				return pdPASS;
 8004778:	2301      	movs	r3, #1
 800477a:	e063      	b.n	8004844 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004782:	f001 ff17 	bl	80065b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004786:	2300      	movs	r3, #0
 8004788:	e05c      	b.n	8004844 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	4618      	mov	r0, r3
 8004796:	f001 f82d 	bl	80057f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800479e:	f001 ff09 	bl	80065b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a2:	f000 fd93 	bl	80052cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047a6:	f001 fed1 	bl	800654c <vPortEnterCritical>
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d103      	bne.n	80047c0 <xQueueGenericSend+0x17c>
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047c6:	b25b      	sxtb	r3, r3
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d103      	bne.n	80047d6 <xQueueGenericSend+0x192>
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d6:	f001 feed 	bl	80065b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047da:	1d3a      	adds	r2, r7, #4
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f81c 	bl	8005820 <xTaskCheckForTimeOut>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d124      	bne.n	8004838 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f0:	f000 faac 	bl	8004d4c <prvIsQueueFull>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d018      	beq.n	800482c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	3310      	adds	r3, #16
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 ff3c 	bl	8005680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480a:	f000 fa37 	bl	8004c7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800480e:	f000 fd6b 	bl	80052e8 <xTaskResumeAll>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	f47f af7c 	bne.w	8004712 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <xQueueGenericSend+0x208>)
 800481c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	e772      	b.n	8004712 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800482c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800482e:	f000 fa25 	bl	8004c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004832:	f000 fd59 	bl	80052e8 <xTaskResumeAll>
 8004836:	e76c      	b.n	8004712 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800483a:	f000 fa1f 	bl	8004c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800483e:	f000 fd53 	bl	80052e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004842:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004844:	4618      	mov	r0, r3
 8004846:	3738      	adds	r7, #56	; 0x38
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10c      	bne.n	8004882 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	b672      	cpsid	i
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	b662      	cpsie	i
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <xQueueGenericSendFromISR+0x40>
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <xQueueGenericSendFromISR+0x44>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <xQueueGenericSendFromISR+0x46>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	b672      	cpsid	i
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	b662      	cpsie	i
 80048ae:	623b      	str	r3, [r7, #32]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d103      	bne.n	80048c2 <xQueueGenericSendFromISR+0x72>
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <xQueueGenericSendFromISR+0x76>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <xQueueGenericSendFromISR+0x78>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10c      	bne.n	80048e6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	b672      	cpsid	i
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	b662      	cpsie	i
 80048e0:	61fb      	str	r3, [r7, #28]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048e6:	f001 ff19 	bl	800671c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048ea:	f3ef 8211 	mrs	r2, BASEPRI
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	b672      	cpsid	i
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	b662      	cpsie	i
 8004902:	61ba      	str	r2, [r7, #24]
 8004904:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004906:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <xQueueGenericSendFromISR+0xcc>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d12c      	bne.n	8004976 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800492c:	f000 f916 	bl	8004b5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004930:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d112      	bne.n	8004960 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	3324      	adds	r3, #36	; 0x24
 8004946:	4618      	mov	r0, r3
 8004948:	f000 feee 	bl	8005728 <xTaskRemoveFromEventList>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00e      	beq.n	8004970 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e007      	b.n	8004970 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004964:	3301      	adds	r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	b25a      	sxtb	r2, r3
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004970:	2301      	movs	r3, #1
 8004972:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004974:	e001      	b.n	800497a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004976:	2300      	movs	r3, #0
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004984:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004988:	4618      	mov	r0, r3
 800498a:	3738      	adds	r7, #56	; 0x38
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	; 0x30
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800499c:	2300      	movs	r3, #0
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10c      	bne.n	80049c4 <xQueueReceive+0x34>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	b672      	cpsid	i
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	b662      	cpsie	i
 80049be:	623b      	str	r3, [r7, #32]
}
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <xQueueReceive+0x42>
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <xQueueReceive+0x46>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <xQueueReceive+0x48>
 80049d6:	2300      	movs	r3, #0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10c      	bne.n	80049f6 <xQueueReceive+0x66>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	b672      	cpsid	i
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	b662      	cpsie	i
 80049f0:	61fb      	str	r3, [r7, #28]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049f6:	f001 f85d 	bl	8005ab4 <xTaskGetSchedulerState>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <xQueueReceive+0x76>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <xQueueReceive+0x7a>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueReceive+0x7c>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10c      	bne.n	8004a2a <xQueueReceive+0x9a>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	b672      	cpsid	i
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	b662      	cpsie	i
 8004a24:	61bb      	str	r3, [r7, #24]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a2a:	f001 fd8f 	bl	800654c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01f      	beq.n	8004a7a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3e:	f000 f8f7 	bl	8004c30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	1e5a      	subs	r2, r3, #1
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00f      	beq.n	8004a72 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	3310      	adds	r3, #16
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fe66 	bl	8005728 <xTaskRemoveFromEventList>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a62:	4b3d      	ldr	r3, [pc, #244]	; (8004b58 <xQueueReceive+0x1c8>)
 8004a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a72:	f001 fd9f 	bl	80065b4 <vPortExitCritical>
				return pdPASS;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e069      	b.n	8004b4e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a80:	f001 fd98 	bl	80065b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e062      	b.n	8004b4e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a8e:	f107 0310 	add.w	r3, r7, #16
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 feae 	bl	80057f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a9c:	f001 fd8a 	bl	80065b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aa0:	f000 fc14 	bl	80052cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aa4:	f001 fd52 	bl	800654c <vPortEnterCritical>
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aae:	b25b      	sxtb	r3, r3
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d103      	bne.n	8004abe <xQueueReceive+0x12e>
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d103      	bne.n	8004ad4 <xQueueReceive+0x144>
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad4:	f001 fd6e 	bl	80065b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ad8:	1d3a      	adds	r2, r7, #4
 8004ada:	f107 0310 	add.w	r3, r7, #16
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fe9d 	bl	8005820 <xTaskCheckForTimeOut>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d123      	bne.n	8004b34 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aee:	f000 f917 	bl	8004d20 <prvIsQueueEmpty>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d017      	beq.n	8004b28 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	3324      	adds	r3, #36	; 0x24
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fdbd 	bl	8005680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b08:	f000 f8b8 	bl	8004c7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b0c:	f000 fbec 	bl	80052e8 <xTaskResumeAll>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d189      	bne.n	8004a2a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <xQueueReceive+0x1c8>)
 8004b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	e780      	b.n	8004a2a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2a:	f000 f8a7 	bl	8004c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b2e:	f000 fbdb 	bl	80052e8 <xTaskResumeAll>
 8004b32:	e77a      	b.n	8004a2a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b36:	f000 f8a1 	bl	8004c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b3a:	f000 fbd5 	bl	80052e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b40:	f000 f8ee 	bl	8004d20 <prvIsQueueEmpty>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f43f af6f 	beq.w	8004a2a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3730      	adds	r7, #48	; 0x30
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10d      	bne.n	8004b96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d14d      	bne.n	8004c1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ffb2 	bl	8005af0 <xTaskPriorityDisinherit>
 8004b8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	e043      	b.n	8004c1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d119      	bne.n	8004bd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6858      	ldr	r0, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	f002 f804 	bl	8006bb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	441a      	add	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d32b      	bcc.n	8004c1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	e026      	b.n	8004c1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68d8      	ldr	r0, [r3, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	f001 ffea 	bl	8006bb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	425b      	negs	r3, r3
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d207      	bcs.n	8004c0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	425b      	negs	r3, r3
 8004c06:	441a      	add	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d105      	bne.n	8004c1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c26:	697b      	ldr	r3, [r7, #20]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	441a      	add	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d303      	bcc.n	8004c64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68d9      	ldr	r1, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	f001 ffa0 	bl	8006bb4 <memcpy>
	}
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c84:	f001 fc62 	bl	800654c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c90:	e011      	b.n	8004cb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3324      	adds	r3, #36	; 0x24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fd42 	bl	8005728 <xTaskRemoveFromEventList>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004caa:	f000 fe1f 	bl	80058ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dce9      	bgt.n	8004c92 <prvUnlockQueue+0x16>
 8004cbe:	e000      	b.n	8004cc2 <prvUnlockQueue+0x46>
					break;
 8004cc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cca:	f001 fc73 	bl	80065b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cce:	f001 fc3d 	bl	800654c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cda:	e011      	b.n	8004d00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3310      	adds	r3, #16
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fd1d 	bl	8005728 <xTaskRemoveFromEventList>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cf4:	f000 fdfa 	bl	80058ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dce9      	bgt.n	8004cdc <prvUnlockQueue+0x60>
 8004d08:	e000      	b.n	8004d0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	22ff      	movs	r2, #255	; 0xff
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d14:	f001 fc4e 	bl	80065b4 <vPortExitCritical>
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d28:	f001 fc10 	bl	800654c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e001      	b.n	8004d3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d3e:	f001 fc39 	bl	80065b4 <vPortExitCritical>

	return xReturn;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d54:	f001 fbfa 	bl	800654c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d102      	bne.n	8004d6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e001      	b.n	8004d6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d6e:	f001 fc21 	bl	80065b4 <vPortExitCritical>

	return xReturn;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e014      	b.n	8004db6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d8c:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <vQueueAddToRegistry+0x50>)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d98:	490c      	ldr	r1, [pc, #48]	; (8004dcc <vQueueAddToRegistry+0x50>)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <vQueueAddToRegistry+0x50>)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dae:	e006      	b.n	8004dbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d9e7      	bls.n	8004d8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	200007d8 	.word	0x200007d8

08004dd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004de0:	f001 fbb4 	bl	800654c <vPortEnterCritical>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dea:	b25b      	sxtb	r3, r3
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d103      	bne.n	8004dfa <vQueueWaitForMessageRestricted+0x2a>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d103      	bne.n	8004e10 <vQueueWaitForMessageRestricted+0x40>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e10:	f001 fbd0 	bl	80065b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	3324      	adds	r3, #36	; 0x24
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fc51 	bl	80056cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e2a:	6978      	ldr	r0, [r7, #20]
 8004e2c:	f7ff ff26 	bl	8004c7c <prvUnlockQueue>
	}
 8004e30:	bf00      	nop
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08e      	sub	sp, #56	; 0x38
 8004e3c:	af04      	add	r7, sp, #16
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10c      	bne.n	8004e66 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	b672      	cpsid	i
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	b662      	cpsie	i
 8004e60:	623b      	str	r3, [r7, #32]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10c      	bne.n	8004e86 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	b672      	cpsid	i
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	b662      	cpsie	i
 8004e80:	61fb      	str	r3, [r7, #28]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e86:	235c      	movs	r3, #92	; 0x5c
 8004e88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b5c      	cmp	r3, #92	; 0x5c
 8004e8e:	d00c      	beq.n	8004eaa <xTaskCreateStatic+0x72>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	b672      	cpsid	i
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	b662      	cpsie	i
 8004ea4:	61bb      	str	r3, [r7, #24]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004eaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01e      	beq.n	8004ef0 <xTaskCreateStatic+0xb8>
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	9302      	str	r3, [sp, #8]
 8004ed2:	f107 0314 	add.w	r3, r7, #20
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f850 	bl	8004f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eea:	f000 f8df 	bl	80050ac <prvAddNewTaskToReadyList>
 8004eee:	e001      	b.n	8004ef4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ef4:	697b      	ldr	r3, [r7, #20]
	}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3728      	adds	r7, #40	; 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b08c      	sub	sp, #48	; 0x30
 8004f02:	af04      	add	r7, sp, #16
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fc46 	bl	80067a4 <pvPortMalloc>
 8004f18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f20:	205c      	movs	r0, #92	; 0x5c
 8004f22:	f001 fc3f 	bl	80067a4 <pvPortMalloc>
 8004f26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
 8004f34:	e005      	b.n	8004f42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f001 fcfe 	bl	8006938 <vPortFree>
 8004f3c:	e001      	b.n	8004f42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d017      	beq.n	8004f78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f50:	88fa      	ldrh	r2, [r7, #6]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9303      	str	r3, [sp, #12]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	9302      	str	r3, [sp, #8]
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f80e 	bl	8004f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6c:	69f8      	ldr	r0, [r7, #28]
 8004f6e:	f000 f89d 	bl	80050ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f72:	2301      	movs	r3, #1
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e002      	b.n	8004f7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	21a5      	movs	r1, #165	; 0xa5
 8004fa2:	f001 fe15 	bl	8006bd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004fb0:	440b      	add	r3, r1
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00c      	beq.n	8004fe4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	b672      	cpsid	i
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	b662      	cpsie	i
 8004fde:	617b      	str	r3, [r7, #20]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01f      	beq.n	800502a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e012      	b.n	8005016 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	7819      	ldrb	r1, [r3, #0]
 8004ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3334      	adds	r3, #52	; 0x34
 8005000:	460a      	mov	r2, r1
 8005002:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d006      	beq.n	800501e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3301      	adds	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2b0f      	cmp	r3, #15
 800501a:	d9e9      	bls.n	8004ff0 <prvInitialiseNewTask+0x68>
 800501c:	e000      	b.n	8005020 <prvInitialiseNewTask+0x98>
			{
				break;
 800501e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005028:	e003      	b.n	8005032 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	2b37      	cmp	r3, #55	; 0x37
 8005036:	d901      	bls.n	800503c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005038:	2337      	movs	r3, #55	; 0x37
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005046:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	2200      	movs	r2, #0
 800504c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	3304      	adds	r3, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f952 	bl	80042fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	3318      	adds	r3, #24
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff f94d 	bl	80042fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005066:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	2200      	movs	r2, #0
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	69b8      	ldr	r0, [r7, #24]
 800508c:	f001 f952 	bl	8006334 <pxPortInitialiseStack>
 8005090:	4602      	mov	r2, r0
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a2:	bf00      	nop
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050b4:	f001 fa4a 	bl	800654c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050b8:	4b2d      	ldr	r3, [pc, #180]	; (8005170 <prvAddNewTaskToReadyList+0xc4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <prvAddNewTaskToReadyList+0xc4>)
 80050c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050c2:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <prvAddNewTaskToReadyList+0xc8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ca:	4a2a      	ldr	r2, [pc, #168]	; (8005174 <prvAddNewTaskToReadyList+0xc8>)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050d0:	4b27      	ldr	r3, [pc, #156]	; (8005170 <prvAddNewTaskToReadyList+0xc4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d110      	bne.n	80050fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050d8:	f000 fc2c 	bl	8005934 <prvInitialiseTaskLists>
 80050dc:	e00d      	b.n	80050fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050de:	4b26      	ldr	r3, [pc, #152]	; (8005178 <prvAddNewTaskToReadyList+0xcc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050e6:	4b23      	ldr	r3, [pc, #140]	; (8005174 <prvAddNewTaskToReadyList+0xc8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d802      	bhi.n	80050fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050f4:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <prvAddNewTaskToReadyList+0xc8>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050fa:	4b20      	ldr	r3, [pc, #128]	; (800517c <prvAddNewTaskToReadyList+0xd0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3301      	adds	r3, #1
 8005100:	4a1e      	ldr	r2, [pc, #120]	; (800517c <prvAddNewTaskToReadyList+0xd0>)
 8005102:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005104:	4b1d      	ldr	r3, [pc, #116]	; (800517c <prvAddNewTaskToReadyList+0xd0>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <prvAddNewTaskToReadyList+0xd4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d903      	bls.n	8005120 <prvAddNewTaskToReadyList+0x74>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	4a18      	ldr	r2, [pc, #96]	; (8005180 <prvAddNewTaskToReadyList+0xd4>)
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4a15      	ldr	r2, [pc, #84]	; (8005184 <prvAddNewTaskToReadyList+0xd8>)
 800512e:	441a      	add	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f7ff f8ed 	bl	8004316 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800513c:	f001 fa3a 	bl	80065b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005140:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <prvAddNewTaskToReadyList+0xcc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00e      	beq.n	8005166 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <prvAddNewTaskToReadyList+0xc8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	429a      	cmp	r2, r3
 8005154:	d207      	bcs.n	8005166 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <prvAddNewTaskToReadyList+0xdc>)
 8005158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000cec 	.word	0x20000cec
 8005174:	20000818 	.word	0x20000818
 8005178:	20000cf8 	.word	0x20000cf8
 800517c:	20000d08 	.word	0x20000d08
 8005180:	20000cf4 	.word	0x20000cf4
 8005184:	2000081c 	.word	0x2000081c
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d019      	beq.n	80051d2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800519e:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <vTaskDelay+0x64>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <vTaskDelay+0x34>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	b672      	cpsid	i
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	b662      	cpsie	i
 80051ba:	60bb      	str	r3, [r7, #8]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <vTaskDelay+0x32>
			vTaskSuspendAll();
 80051c0:	f000 f884 	bl	80052cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051c4:	2100      	movs	r1, #0
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fd04 	bl	8005bd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051cc:	f000 f88c 	bl	80052e8 <xTaskResumeAll>
 80051d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d107      	bne.n	80051e8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80051d8:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <vTaskDelay+0x68>)
 80051da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000d14 	.word	0x20000d14
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005206:	463a      	mov	r2, r7
 8005208:	1d39      	adds	r1, r7, #4
 800520a:	f107 0308 	add.w	r3, r7, #8
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff f820 	bl	8004254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	9202      	str	r2, [sp, #8]
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	2300      	movs	r3, #0
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2300      	movs	r3, #0
 8005224:	460a      	mov	r2, r1
 8005226:	4923      	ldr	r1, [pc, #140]	; (80052b4 <vTaskStartScheduler+0xbc>)
 8005228:	4823      	ldr	r0, [pc, #140]	; (80052b8 <vTaskStartScheduler+0xc0>)
 800522a:	f7ff fe05 	bl	8004e38 <xTaskCreateStatic>
 800522e:	4603      	mov	r3, r0
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <vTaskStartScheduler+0xc4>)
 8005232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005234:	4b21      	ldr	r3, [pc, #132]	; (80052bc <vTaskStartScheduler+0xc4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800523c:	2301      	movs	r3, #1
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e001      	b.n	8005246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d102      	bne.n	8005252 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800524c:	f000 fd16 	bl	8005c7c <xTimerCreateTimerTask>
 8005250:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d118      	bne.n	800528a <vTaskStartScheduler+0x92>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	b672      	cpsid	i
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	b662      	cpsie	i
 800526c:	613b      	str	r3, [r7, #16]
}
 800526e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005270:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <vTaskStartScheduler+0xc8>)
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <vTaskStartScheduler+0xcc>)
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <vTaskStartScheduler+0xd0>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005284:	f001 f8e4 	bl	8006450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005288:	e010      	b.n	80052ac <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d10c      	bne.n	80052ac <vTaskStartScheduler+0xb4>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	b672      	cpsid	i
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	b662      	cpsie	i
 80052a6:	60fb      	str	r3, [r7, #12]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <vTaskStartScheduler+0xb2>
}
 80052ac:	bf00      	nop
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	08006c0c 	.word	0x08006c0c
 80052b8:	08005905 	.word	0x08005905
 80052bc:	20000d10 	.word	0x20000d10
 80052c0:	20000d0c 	.word	0x20000d0c
 80052c4:	20000cf8 	.word	0x20000cf8
 80052c8:	20000cf0 	.word	0x20000cf0

080052cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052d0:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <vTaskSuspendAll+0x18>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a03      	ldr	r2, [pc, #12]	; (80052e4 <vTaskSuspendAll+0x18>)
 80052d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80052da:	bf00      	nop
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	20000d14 	.word	0x20000d14

080052e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052f6:	4b43      	ldr	r3, [pc, #268]	; (8005404 <xTaskResumeAll+0x11c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10c      	bne.n	8005318 <xTaskResumeAll+0x30>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	b672      	cpsid	i
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	b662      	cpsie	i
 8005312:	603b      	str	r3, [r7, #0]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005318:	f001 f918 	bl	800654c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800531c:	4b39      	ldr	r3, [pc, #228]	; (8005404 <xTaskResumeAll+0x11c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3b01      	subs	r3, #1
 8005322:	4a38      	ldr	r2, [pc, #224]	; (8005404 <xTaskResumeAll+0x11c>)
 8005324:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005326:	4b37      	ldr	r3, [pc, #220]	; (8005404 <xTaskResumeAll+0x11c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d162      	bne.n	80053f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800532e:	4b36      	ldr	r3, [pc, #216]	; (8005408 <xTaskResumeAll+0x120>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d05e      	beq.n	80053f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005336:	e02f      	b.n	8005398 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005338:	4b34      	ldr	r3, [pc, #208]	; (800540c <xTaskResumeAll+0x124>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3318      	adds	r3, #24
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff f843 	bl	80043d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3304      	adds	r3, #4
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff f83e 	bl	80043d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <xTaskResumeAll+0x128>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d903      	bls.n	8005368 <xTaskResumeAll+0x80>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <xTaskResumeAll+0x128>)
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4a27      	ldr	r2, [pc, #156]	; (8005414 <xTaskResumeAll+0x12c>)
 8005376:	441a      	add	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f7fe ffc9 	bl	8004316 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	4b23      	ldr	r3, [pc, #140]	; (8005418 <xTaskResumeAll+0x130>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005392:	4b22      	ldr	r3, [pc, #136]	; (800541c <xTaskResumeAll+0x134>)
 8005394:	2201      	movs	r2, #1
 8005396:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005398:	4b1c      	ldr	r3, [pc, #112]	; (800540c <xTaskResumeAll+0x124>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1cb      	bne.n	8005338 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053a6:	f000 fb65 	bl	8005a74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053aa:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <xTaskResumeAll+0x138>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d010      	beq.n	80053d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053b6:	f000 f847 	bl	8005448 <xTaskIncrementTick>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80053c0:	4b16      	ldr	r3, [pc, #88]	; (800541c <xTaskResumeAll+0x134>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f1      	bne.n	80053b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80053d2:	4b13      	ldr	r3, [pc, #76]	; (8005420 <xTaskResumeAll+0x138>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053d8:	4b10      	ldr	r3, [pc, #64]	; (800541c <xTaskResumeAll+0x134>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <xTaskResumeAll+0x13c>)
 80053e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053f4:	f001 f8de 	bl	80065b4 <vPortExitCritical>

	return xAlreadyYielded;
 80053f8:	68bb      	ldr	r3, [r7, #8]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000d14 	.word	0x20000d14
 8005408:	20000cec 	.word	0x20000cec
 800540c:	20000cac 	.word	0x20000cac
 8005410:	20000cf4 	.word	0x20000cf4
 8005414:	2000081c 	.word	0x2000081c
 8005418:	20000818 	.word	0x20000818
 800541c:	20000d00 	.word	0x20000d00
 8005420:	20000cfc 	.word	0x20000cfc
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <xTaskGetTickCount+0x1c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005434:	687b      	ldr	r3, [r7, #4]
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000cf0 	.word	0x20000cf0

08005448 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005452:	4b50      	ldr	r3, [pc, #320]	; (8005594 <xTaskIncrementTick+0x14c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f040 808b 	bne.w	8005572 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800545c:	4b4e      	ldr	r3, [pc, #312]	; (8005598 <xTaskIncrementTick+0x150>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005464:	4a4c      	ldr	r2, [pc, #304]	; (8005598 <xTaskIncrementTick+0x150>)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d122      	bne.n	80054b6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005470:	4b4a      	ldr	r3, [pc, #296]	; (800559c <xTaskIncrementTick+0x154>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00c      	beq.n	8005494 <xTaskIncrementTick+0x4c>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	b672      	cpsid	i
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	b662      	cpsie	i
 800548e:	603b      	str	r3, [r7, #0]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <xTaskIncrementTick+0x4a>
 8005494:	4b41      	ldr	r3, [pc, #260]	; (800559c <xTaskIncrementTick+0x154>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	4b41      	ldr	r3, [pc, #260]	; (80055a0 <xTaskIncrementTick+0x158>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a3f      	ldr	r2, [pc, #252]	; (800559c <xTaskIncrementTick+0x154>)
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4a3f      	ldr	r2, [pc, #252]	; (80055a0 <xTaskIncrementTick+0x158>)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <xTaskIncrementTick+0x15c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	4a3d      	ldr	r2, [pc, #244]	; (80055a4 <xTaskIncrementTick+0x15c>)
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	f000 fadf 	bl	8005a74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054b6:	4b3c      	ldr	r3, [pc, #240]	; (80055a8 <xTaskIncrementTick+0x160>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d349      	bcc.n	8005554 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054c0:	4b36      	ldr	r3, [pc, #216]	; (800559c <xTaskIncrementTick+0x154>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ca:	4b37      	ldr	r3, [pc, #220]	; (80055a8 <xTaskIncrementTick+0x160>)
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295
 80054d0:	601a      	str	r2, [r3, #0]
					break;
 80054d2:	e03f      	b.n	8005554 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d4:	4b31      	ldr	r3, [pc, #196]	; (800559c <xTaskIncrementTick+0x154>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d203      	bcs.n	80054f4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054ec:	4a2e      	ldr	r2, [pc, #184]	; (80055a8 <xTaskIncrementTick+0x160>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054f2:	e02f      	b.n	8005554 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe ff69 	bl	80043d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3318      	adds	r3, #24
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe ff60 	bl	80043d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005514:	4b25      	ldr	r3, [pc, #148]	; (80055ac <xTaskIncrementTick+0x164>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d903      	bls.n	8005524 <xTaskIncrementTick+0xdc>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4a22      	ldr	r2, [pc, #136]	; (80055ac <xTaskIncrementTick+0x164>)
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <xTaskIncrementTick+0x168>)
 8005532:	441a      	add	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	3304      	adds	r3, #4
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f7fe feeb 	bl	8004316 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <xTaskIncrementTick+0x16c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	429a      	cmp	r2, r3
 800554c:	d3b8      	bcc.n	80054c0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800554e:	2301      	movs	r3, #1
 8005550:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005552:	e7b5      	b.n	80054c0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005554:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <xTaskIncrementTick+0x16c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	4915      	ldr	r1, [pc, #84]	; (80055b0 <xTaskIncrementTick+0x168>)
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d907      	bls.n	800557c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e004      	b.n	800557c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <xTaskIncrementTick+0x170>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	4a0f      	ldr	r2, [pc, #60]	; (80055b8 <xTaskIncrementTick+0x170>)
 800557a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800557c:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <xTaskIncrementTick+0x174>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005584:	2301      	movs	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005588:	697b      	ldr	r3, [r7, #20]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000d14 	.word	0x20000d14
 8005598:	20000cf0 	.word	0x20000cf0
 800559c:	20000ca4 	.word	0x20000ca4
 80055a0:	20000ca8 	.word	0x20000ca8
 80055a4:	20000d04 	.word	0x20000d04
 80055a8:	20000d0c 	.word	0x20000d0c
 80055ac:	20000cf4 	.word	0x20000cf4
 80055b0:	2000081c 	.word	0x2000081c
 80055b4:	20000818 	.word	0x20000818
 80055b8:	20000cfc 	.word	0x20000cfc
 80055bc:	20000d00 	.word	0x20000d00

080055c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055c6:	4b29      	ldr	r3, [pc, #164]	; (800566c <vTaskSwitchContext+0xac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055ce:	4b28      	ldr	r3, [pc, #160]	; (8005670 <vTaskSwitchContext+0xb0>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055d4:	e043      	b.n	800565e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80055d6:	4b26      	ldr	r3, [pc, #152]	; (8005670 <vTaskSwitchContext+0xb0>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055dc:	4b25      	ldr	r3, [pc, #148]	; (8005674 <vTaskSwitchContext+0xb4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e012      	b.n	800560a <vTaskSwitchContext+0x4a>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10c      	bne.n	8005604 <vTaskSwitchContext+0x44>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	b672      	cpsid	i
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	b662      	cpsie	i
 80055fe:	607b      	str	r3, [r7, #4]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <vTaskSwitchContext+0x42>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	491b      	ldr	r1, [pc, #108]	; (8005678 <vTaskSwitchContext+0xb8>)
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0e2      	beq.n	80055e4 <vTaskSwitchContext+0x24>
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <vTaskSwitchContext+0xb8>)
 800562a:	4413      	add	r3, r2
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	3308      	adds	r3, #8
 8005640:	429a      	cmp	r2, r3
 8005642:	d104      	bne.n	800564e <vTaskSwitchContext+0x8e>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4a09      	ldr	r2, [pc, #36]	; (800567c <vTaskSwitchContext+0xbc>)
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4a06      	ldr	r2, [pc, #24]	; (8005674 <vTaskSwitchContext+0xb4>)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6013      	str	r3, [r2, #0]
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20000d14 	.word	0x20000d14
 8005670:	20000d00 	.word	0x20000d00
 8005674:	20000cf4 	.word	0x20000cf4
 8005678:	2000081c 	.word	0x2000081c
 800567c:	20000818 	.word	0x20000818

08005680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10c      	bne.n	80056aa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	b672      	cpsid	i
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	b662      	cpsie	i
 80056a4:	60fb      	str	r3, [r7, #12]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <vTaskPlaceOnEventList+0x48>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3318      	adds	r3, #24
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fe fe53 	bl	800435e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056b8:	2101      	movs	r1, #1
 80056ba:	6838      	ldr	r0, [r7, #0]
 80056bc:	f000 fa8a 	bl	8005bd4 <prvAddCurrentTaskToDelayedList>
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000818 	.word	0x20000818

080056cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10c      	bne.n	80056f8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	b672      	cpsid	i
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	b662      	cpsie	i
 80056f2:	617b      	str	r3, [r7, #20]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <vTaskPlaceOnEventListRestricted+0x58>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3318      	adds	r3, #24
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7fe fe08 	bl	8004316 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800570c:	f04f 33ff 	mov.w	r3, #4294967295
 8005710:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	68b8      	ldr	r0, [r7, #8]
 8005716:	f000 fa5d 	bl	8005bd4 <prvAddCurrentTaskToDelayedList>
	}
 800571a:	bf00      	nop
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000818 	.word	0x20000818

08005728 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10c      	bne.n	8005758 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	b672      	cpsid	i
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	b662      	cpsie	i
 8005752:	60fb      	str	r3, [r7, #12]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3318      	adds	r3, #24
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fe37 	bl	80043d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005762:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <xTaskRemoveFromEventList+0xb4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11d      	bne.n	80057a6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3304      	adds	r3, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fe2e 	bl	80043d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <xTaskRemoveFromEventList+0xb8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d903      	bls.n	8005788 <xTaskRemoveFromEventList+0x60>
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	4a16      	ldr	r2, [pc, #88]	; (80057e0 <xTaskRemoveFromEventList+0xb8>)
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <xTaskRemoveFromEventList+0xbc>)
 8005796:	441a      	add	r2, r3
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	3304      	adds	r3, #4
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	f7fe fdb9 	bl	8004316 <vListInsertEnd>
 80057a4:	e005      	b.n	80057b2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	3318      	adds	r3, #24
 80057aa:	4619      	mov	r1, r3
 80057ac:	480e      	ldr	r0, [pc, #56]	; (80057e8 <xTaskRemoveFromEventList+0xc0>)
 80057ae:	f7fe fdb2 	bl	8004316 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <xTaskRemoveFromEventList+0xc4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	429a      	cmp	r2, r3
 80057be:	d905      	bls.n	80057cc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057c4:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <xTaskRemoveFromEventList+0xc8>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e001      	b.n	80057d0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057d0:	697b      	ldr	r3, [r7, #20]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000d14 	.word	0x20000d14
 80057e0:	20000cf4 	.word	0x20000cf4
 80057e4:	2000081c 	.word	0x2000081c
 80057e8:	20000cac 	.word	0x20000cac
 80057ec:	20000818 	.word	0x20000818
 80057f0:	20000d00 	.word	0x20000d00

080057f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <vTaskInternalSetTimeOutState+0x24>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <vTaskInternalSetTimeOutState+0x28>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	605a      	str	r2, [r3, #4]
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	20000d04 	.word	0x20000d04
 800581c:	20000cf0 	.word	0x20000cf0

08005820 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10c      	bne.n	800584a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	b672      	cpsid	i
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	b662      	cpsie	i
 8005844:	613b      	str	r3, [r7, #16]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10c      	bne.n	800586a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	b672      	cpsid	i
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	b662      	cpsie	i
 8005864:	60fb      	str	r3, [r7, #12]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800586a:	f000 fe6f 	bl	800654c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800586e:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <xTaskCheckForTimeOut+0xc4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d102      	bne.n	800588e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	e023      	b.n	80058d6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <xTaskCheckForTimeOut+0xc8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d007      	beq.n	80058aa <xTaskCheckForTimeOut+0x8a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	e015      	b.n	80058d6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d20b      	bcs.n	80058cc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad2      	subs	r2, r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ff97 	bl	80057f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	e004      	b.n	80058d6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058d6:	f000 fe6d 	bl	80065b4 <vPortExitCritical>

	return xReturn;
 80058da:	69fb      	ldr	r3, [r7, #28]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3720      	adds	r7, #32
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000cf0 	.word	0x20000cf0
 80058e8:	20000d04 	.word	0x20000d04

080058ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <vTaskMissedYield+0x14>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
}
 80058f6:	bf00      	nop
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	20000d00 	.word	0x20000d00

08005904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800590c:	f000 f852 	bl	80059b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <prvIdleTask+0x28>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d9f9      	bls.n	800590c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <prvIdleTask+0x2c>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005928:	e7f0      	b.n	800590c <prvIdleTask+0x8>
 800592a:	bf00      	nop
 800592c:	2000081c 	.word	0x2000081c
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	e00c      	b.n	800595a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <prvInitialiseTaskLists+0x60>)
 800594c:	4413      	add	r3, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fcb4 	bl	80042bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3301      	adds	r3, #1
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b37      	cmp	r3, #55	; 0x37
 800595e:	d9ef      	bls.n	8005940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005960:	480d      	ldr	r0, [pc, #52]	; (8005998 <prvInitialiseTaskLists+0x64>)
 8005962:	f7fe fcab 	bl	80042bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005966:	480d      	ldr	r0, [pc, #52]	; (800599c <prvInitialiseTaskLists+0x68>)
 8005968:	f7fe fca8 	bl	80042bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800596c:	480c      	ldr	r0, [pc, #48]	; (80059a0 <prvInitialiseTaskLists+0x6c>)
 800596e:	f7fe fca5 	bl	80042bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005972:	480c      	ldr	r0, [pc, #48]	; (80059a4 <prvInitialiseTaskLists+0x70>)
 8005974:	f7fe fca2 	bl	80042bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005978:	480b      	ldr	r0, [pc, #44]	; (80059a8 <prvInitialiseTaskLists+0x74>)
 800597a:	f7fe fc9f 	bl	80042bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <prvInitialiseTaskLists+0x78>)
 8005980:	4a05      	ldr	r2, [pc, #20]	; (8005998 <prvInitialiseTaskLists+0x64>)
 8005982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvInitialiseTaskLists+0x7c>)
 8005986:	4a05      	ldr	r2, [pc, #20]	; (800599c <prvInitialiseTaskLists+0x68>)
 8005988:	601a      	str	r2, [r3, #0]
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000081c 	.word	0x2000081c
 8005998:	20000c7c 	.word	0x20000c7c
 800599c:	20000c90 	.word	0x20000c90
 80059a0:	20000cac 	.word	0x20000cac
 80059a4:	20000cc0 	.word	0x20000cc0
 80059a8:	20000cd8 	.word	0x20000cd8
 80059ac:	20000ca4 	.word	0x20000ca4
 80059b0:	20000ca8 	.word	0x20000ca8

080059b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ba:	e019      	b.n	80059f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059bc:	f000 fdc6 	bl	800654c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c0:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <prvCheckTasksWaitingTermination+0x50>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fcff 	bl	80043d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <prvCheckTasksWaitingTermination+0x54>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4a0b      	ldr	r2, [pc, #44]	; (8005a08 <prvCheckTasksWaitingTermination+0x54>)
 80059da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <prvCheckTasksWaitingTermination+0x58>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <prvCheckTasksWaitingTermination+0x58>)
 80059e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059e6:	f000 fde5 	bl	80065b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f810 	bl	8005a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <prvCheckTasksWaitingTermination+0x58>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e1      	bne.n	80059bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000cc0 	.word	0x20000cc0
 8005a08:	20000cec 	.word	0x20000cec
 8005a0c:	20000cd4 	.word	0x20000cd4

08005a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d108      	bne.n	8005a34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 ff86 	bl	8006938 <vPortFree>
				vPortFree( pxTCB );
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 ff83 	bl	8006938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a32:	e01a      	b.n	8005a6a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d103      	bne.n	8005a46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 ff7a 	bl	8006938 <vPortFree>
	}
 8005a44:	e011      	b.n	8005a6a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d00c      	beq.n	8005a6a <prvDeleteTCB+0x5a>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	b672      	cpsid	i
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	b662      	cpsie	i
 8005a64:	60fb      	str	r3, [r7, #12]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <prvDeleteTCB+0x58>
	}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <prvResetNextTaskUnblockTime+0x38>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8005a86:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a8c:	e008      	b.n	8005aa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8e:	4b07      	ldr	r3, [pc, #28]	; (8005aac <prvResetNextTaskUnblockTime+0x38>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a04      	ldr	r2, [pc, #16]	; (8005ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8005a9e:	6013      	str	r3, [r2, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20000ca4 	.word	0x20000ca4
 8005ab0:	20000d0c 	.word	0x20000d0c

08005ab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <xTaskGetSchedulerState+0x34>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	e008      	b.n	8005ada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <xTaskGetSchedulerState+0x38>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	e001      	b.n	8005ada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ada:	687b      	ldr	r3, [r7, #4]
	}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	20000cf8 	.word	0x20000cf8
 8005aec:	20000d14 	.word	0x20000d14

08005af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d05a      	beq.n	8005bbc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b06:	4b30      	ldr	r3, [pc, #192]	; (8005bc8 <xTaskPriorityDisinherit+0xd8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d00c      	beq.n	8005b2a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	b672      	cpsid	i
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	b662      	cpsie	i
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	b672      	cpsid	i
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	b662      	cpsie	i
 8005b46:	60bb      	str	r3, [r7, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	1e5a      	subs	r2, r3, #1
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d02c      	beq.n	8005bbc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d128      	bne.n	8005bbc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fc2e 	bl	80043d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <xTaskPriorityDisinherit+0xdc>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d903      	bls.n	8005b9c <xTaskPriorityDisinherit+0xac>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a0c      	ldr	r2, [pc, #48]	; (8005bcc <xTaskPriorityDisinherit+0xdc>)
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <xTaskPriorityDisinherit+0xe0>)
 8005baa:	441a      	add	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7fe fbaf 	bl	8004316 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bbc:	697b      	ldr	r3, [r7, #20]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000818 	.word	0x20000818
 8005bcc:	20000cf4 	.word	0x20000cf4
 8005bd0:	2000081c 	.word	0x2000081c

08005bd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bde:	4b21      	ldr	r3, [pc, #132]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x90>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be4:	4b20      	ldr	r3, [pc, #128]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fbf0 	bl	80043d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d10a      	bne.n	8005c0e <prvAddCurrentTaskToDelayedList+0x3a>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4819      	ldr	r0, [pc, #100]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x98>)
 8005c08:	f7fe fb85 	bl	8004316 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c0c:	e026      	b.n	8005c5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4413      	add	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c16:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d209      	bcs.n	8005c3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c26:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe fb93 	bl	800435e <vListInsert>
}
 8005c38:	e010      	b.n	8005c5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3a:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7fe fb89 	bl	800435e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d202      	bcs.n	8005c5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c56:	4a08      	ldr	r2, [pc, #32]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6013      	str	r3, [r2, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000cf0 	.word	0x20000cf0
 8005c68:	20000818 	.word	0x20000818
 8005c6c:	20000cd8 	.word	0x20000cd8
 8005c70:	20000ca8 	.word	0x20000ca8
 8005c74:	20000ca4 	.word	0x20000ca4
 8005c78:	20000d0c 	.word	0x20000d0c

08005c7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08a      	sub	sp, #40	; 0x28
 8005c80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c86:	f000 fb15 	bl	80062b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <xTimerCreateTimerTask+0x84>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d021      	beq.n	8005cd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c9a:	1d3a      	adds	r2, r7, #4
 8005c9c:	f107 0108 	add.w	r1, r7, #8
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe faef 	bl	8004288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	9202      	str	r2, [sp, #8]
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	460a      	mov	r2, r1
 8005cbc:	4911      	ldr	r1, [pc, #68]	; (8005d04 <xTimerCreateTimerTask+0x88>)
 8005cbe:	4812      	ldr	r0, [pc, #72]	; (8005d08 <xTimerCreateTimerTask+0x8c>)
 8005cc0:	f7ff f8ba 	bl	8004e38 <xTaskCreateStatic>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <xTimerCreateTimerTask+0x90>)
 8005cc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <xTimerCreateTimerTask+0x90>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10c      	bne.n	8005cf6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	b672      	cpsid	i
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	b662      	cpsie	i
 8005cf0:	613b      	str	r3, [r7, #16]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000d48 	.word	0x20000d48
 8005d04:	08006c14 	.word	0x08006c14
 8005d08:	08005e4d 	.word	0x08005e4d
 8005d0c:	20000d4c 	.word	0x20000d4c

08005d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10c      	bne.n	8005d42 <xTimerGenericCommand+0x32>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	b672      	cpsid	i
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	b662      	cpsie	i
 8005d3c:	623b      	str	r3, [r7, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <xTimerGenericCommand+0x9c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d02a      	beq.n	8005da0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b05      	cmp	r3, #5
 8005d5a:	dc18      	bgt.n	8005d8e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d5c:	f7ff feaa 	bl	8005ab4 <xTaskGetSchedulerState>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d109      	bne.n	8005d7a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <xTimerGenericCommand+0x9c>)
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	f107 0110 	add.w	r1, r7, #16
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d72:	f7fe fc67 	bl	8004644 <xQueueGenericSend>
 8005d76:	6278      	str	r0, [r7, #36]	; 0x24
 8005d78:	e012      	b.n	8005da0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <xTimerGenericCommand+0x9c>)
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f107 0110 	add.w	r1, r7, #16
 8005d82:	2300      	movs	r3, #0
 8005d84:	2200      	movs	r2, #0
 8005d86:	f7fe fc5d 	bl	8004644 <xQueueGenericSend>
 8005d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d8c:	e008      	b.n	8005da0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <xTimerGenericCommand+0x9c>)
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	f107 0110 	add.w	r1, r7, #16
 8005d96:	2300      	movs	r3, #0
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	f7fe fd59 	bl	8004850 <xQueueGenericSendFromISR>
 8005d9e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3728      	adds	r7, #40	; 0x28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000d48 	.word	0x20000d48

08005db0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dba:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <prvProcessExpiredTimer+0x98>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fb01 	bl	80043d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d024      	beq.n	8005e26 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	18d1      	adds	r1, r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	6978      	ldr	r0, [r7, #20]
 8005dea:	f000 f8d3 	bl	8005f94 <prvInsertTimerInActiveList>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d021      	beq.n	8005e38 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005df4:	2300      	movs	r3, #0
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	6978      	ldr	r0, [r7, #20]
 8005e00:	f7ff ff86 	bl	8005d10 <xTimerGenericCommand>
 8005e04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d115      	bne.n	8005e38 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	b672      	cpsid	i
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	b662      	cpsie	i
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	6978      	ldr	r0, [r7, #20]
 8005e3e:	4798      	blx	r3
}
 8005e40:	bf00      	nop
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000d40 	.word	0x20000d40

08005e4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e54:	f107 0308 	add.w	r3, r7, #8
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f857 	bl	8005f0c <prvGetNextExpireTime>
 8005e5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4619      	mov	r1, r3
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f803 	bl	8005e70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e6a:	f000 f8d5 	bl	8006018 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e6e:	e7f1      	b.n	8005e54 <prvTimerTask+0x8>

08005e70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e7a:	f7ff fa27 	bl	80052cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e7e:	f107 0308 	add.w	r3, r7, #8
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f866 	bl	8005f54 <prvSampleTimeNow>
 8005e88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d130      	bne.n	8005ef2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <prvProcessTimerOrBlockTask+0x3c>
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d806      	bhi.n	8005eac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e9e:	f7ff fa23 	bl	80052e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ea2:	68f9      	ldr	r1, [r7, #12]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff83 	bl	8005db0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005eaa:	e024      	b.n	8005ef6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005eb2:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <prvProcessTimerOrBlockTask+0x90>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <prvProcessTimerOrBlockTask+0x50>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <prvProcessTimerOrBlockTask+0x52>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <prvProcessTimerOrBlockTask+0x94>)
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f7fe ff7d 	bl	8004dd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ed6:	f7ff fa07 	bl	80052e8 <xTaskResumeAll>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <prvProcessTimerOrBlockTask+0x98>)
 8005ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
}
 8005ef0:	e001      	b.n	8005ef6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ef2:	f7ff f9f9 	bl	80052e8 <xTaskResumeAll>
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000d44 	.word	0x20000d44
 8005f04:	20000d48 	.word	0x20000d48
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <prvGetNextExpireTime+0x44>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <prvGetNextExpireTime+0x16>
 8005f1e:	2201      	movs	r2, #1
 8005f20:	e000      	b.n	8005f24 <prvGetNextExpireTime+0x18>
 8005f22:	2200      	movs	r2, #0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <prvGetNextExpireTime+0x44>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e001      	b.n	8005f40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000d40 	.word	0x20000d40

08005f54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f5c:	f7ff fa64 	bl	8005428 <xTaskGetTickCount>
 8005f60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <prvSampleTimeNow+0x3c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d205      	bcs.n	8005f78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f6c:	f000 f93c 	bl	80061e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e002      	b.n	8005f7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f7e:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <prvSampleTimeNow+0x3c>)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f84:	68fb      	ldr	r3, [r7, #12]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000d50 	.word	0x20000d50

08005f94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d812      	bhi.n	8005fe0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d302      	bcc.n	8005fce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e01b      	b.n	8006006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fce:	4b10      	ldr	r3, [pc, #64]	; (8006010 <prvInsertTimerInActiveList+0x7c>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f7fe f9c0 	bl	800435e <vListInsert>
 8005fde:	e012      	b.n	8006006 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d206      	bcs.n	8005ff6 <prvInsertTimerInActiveList+0x62>
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d302      	bcc.n	8005ff6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	e007      	b.n	8006006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <prvInsertTimerInActiveList+0x80>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4619      	mov	r1, r3
 8006000:	4610      	mov	r0, r2
 8006002:	f7fe f9ac 	bl	800435e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006006:	697b      	ldr	r3, [r7, #20]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000d44 	.word	0x20000d44
 8006014:	20000d40 	.word	0x20000d40

08006018 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08e      	sub	sp, #56	; 0x38
 800601c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800601e:	e0d0      	b.n	80061c2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	da1a      	bge.n	800605c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006026:	1d3b      	adds	r3, r7, #4
 8006028:	3304      	adds	r3, #4
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10c      	bne.n	800604c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	b672      	cpsid	i
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	b662      	cpsie	i
 8006046:	61fb      	str	r3, [r7, #28]
}
 8006048:	bf00      	nop
 800604a:	e7fe      	b.n	800604a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006052:	6850      	ldr	r0, [r2, #4]
 8006054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006056:	6892      	ldr	r2, [r2, #8]
 8006058:	4611      	mov	r1, r2
 800605a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f2c0 80ae 	blt.w	80061c0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	3304      	adds	r3, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe f9ab 	bl	80043d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800607a:	463b      	mov	r3, r7
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff ff69 	bl	8005f54 <prvSampleTimeNow>
 8006082:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b09      	cmp	r3, #9
 8006088:	f200 809b 	bhi.w	80061c2 <prvProcessReceivedCommands+0x1aa>
 800608c:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <prvProcessReceivedCommands+0x7c>)
 800608e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006092:	bf00      	nop
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	08006135 	.word	0x08006135
 80060a4:	08006149 	.word	0x08006149
 80060a8:	08006197 	.word	0x08006197
 80060ac:	080060bd 	.word	0x080060bd
 80060b0:	080060bd 	.word	0x080060bd
 80060b4:	08006135 	.word	0x08006135
 80060b8:	08006149 	.word	0x08006149
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	18d1      	adds	r1, r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060dc:	f7ff ff5a 	bl	8005f94 <prvInsertTimerInActiveList>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d06d      	beq.n	80061c2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d062      	beq.n	80061c2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	441a      	add	r2, r3
 8006104:	2300      	movs	r3, #0
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	2300      	movs	r3, #0
 800610a:	2100      	movs	r1, #0
 800610c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800610e:	f7ff fdff 	bl	8005d10 <xTimerGenericCommand>
 8006112:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d153      	bne.n	80061c2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	b672      	cpsid	i
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	b662      	cpsie	i
 800612e:	61bb      	str	r3, [r7, #24]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006146:	e03c      	b.n	80061c2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800614e:	f043 0301 	orr.w	r3, r3, #1
 8006152:	b2da      	uxtb	r2, r3
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10c      	bne.n	8006182 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	b672      	cpsid	i
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	b662      	cpsie	i
 800617c:	617b      	str	r3, [r7, #20]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	18d1      	adds	r1, r2, r3
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006190:	f7ff ff00 	bl	8005f94 <prvInsertTimerInActiveList>
					break;
 8006194:	e015      	b.n	80061c2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80061a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a6:	f000 fbc7 	bl	8006938 <vPortFree>
 80061aa:	e00a      	b.n	80061c2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061be:	e000      	b.n	80061c2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <prvProcessReceivedCommands+0x1cc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	1d39      	adds	r1, r7, #4
 80061c8:	2200      	movs	r2, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fbe0 	bl	8004990 <xQueueReceive>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f47f af24 	bne.w	8006020 <prvProcessReceivedCommands+0x8>
	}
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	3730      	adds	r7, #48	; 0x30
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000d48 	.word	0x20000d48

080061e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ee:	e04a      	b.n	8006286 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061f0:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <prvSwitchTimerLists+0xc4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061fa:	4b2c      	ldr	r3, [pc, #176]	; (80062ac <prvSwitchTimerLists+0xc4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3304      	adds	r3, #4
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe f8e1 	bl	80043d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d030      	beq.n	8006286 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	429a      	cmp	r2, r3
 8006234:	d90e      	bls.n	8006254 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006242:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <prvSwitchTimerLists+0xc4>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3304      	adds	r3, #4
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f7fe f886 	bl	800435e <vListInsert>
 8006252:	e018      	b.n	8006286 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006254:	2300      	movs	r3, #0
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	2100      	movs	r1, #0
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff fd56 	bl	8005d10 <xTimerGenericCommand>
 8006264:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10c      	bne.n	8006286 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	b672      	cpsid	i
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	b662      	cpsie	i
 8006280:	603b      	str	r3, [r7, #0]
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <prvSwitchTimerLists+0xc4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1af      	bne.n	80061f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006290:	4b06      	ldr	r3, [pc, #24]	; (80062ac <prvSwitchTimerLists+0xc4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <prvSwitchTimerLists+0xc8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a04      	ldr	r2, [pc, #16]	; (80062ac <prvSwitchTimerLists+0xc4>)
 800629c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800629e:	4a04      	ldr	r2, [pc, #16]	; (80062b0 <prvSwitchTimerLists+0xc8>)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	6013      	str	r3, [r2, #0]
}
 80062a4:	bf00      	nop
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000d40 	.word	0x20000d40
 80062b0:	20000d44 	.word	0x20000d44

080062b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062ba:	f000 f947 	bl	800654c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062be:	4b15      	ldr	r3, [pc, #84]	; (8006314 <prvCheckForValidListAndQueue+0x60>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d120      	bne.n	8006308 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062c6:	4814      	ldr	r0, [pc, #80]	; (8006318 <prvCheckForValidListAndQueue+0x64>)
 80062c8:	f7fd fff8 	bl	80042bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062cc:	4813      	ldr	r0, [pc, #76]	; (800631c <prvCheckForValidListAndQueue+0x68>)
 80062ce:	f7fd fff5 	bl	80042bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <prvCheckForValidListAndQueue+0x6c>)
 80062d4:	4a10      	ldr	r2, [pc, #64]	; (8006318 <prvCheckForValidListAndQueue+0x64>)
 80062d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062d8:	4b12      	ldr	r3, [pc, #72]	; (8006324 <prvCheckForValidListAndQueue+0x70>)
 80062da:	4a10      	ldr	r2, [pc, #64]	; (800631c <prvCheckForValidListAndQueue+0x68>)
 80062dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062de:	2300      	movs	r3, #0
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	4b11      	ldr	r3, [pc, #68]	; (8006328 <prvCheckForValidListAndQueue+0x74>)
 80062e4:	4a11      	ldr	r2, [pc, #68]	; (800632c <prvCheckForValidListAndQueue+0x78>)
 80062e6:	2110      	movs	r1, #16
 80062e8:	200a      	movs	r0, #10
 80062ea:	f7fe f905 	bl	80044f8 <xQueueGenericCreateStatic>
 80062ee:	4603      	mov	r3, r0
 80062f0:	4a08      	ldr	r2, [pc, #32]	; (8006314 <prvCheckForValidListAndQueue+0x60>)
 80062f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062f4:	4b07      	ldr	r3, [pc, #28]	; (8006314 <prvCheckForValidListAndQueue+0x60>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <prvCheckForValidListAndQueue+0x60>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	490b      	ldr	r1, [pc, #44]	; (8006330 <prvCheckForValidListAndQueue+0x7c>)
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fd3a 	bl	8004d7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006308:	f000 f954 	bl	80065b4 <vPortExitCritical>
}
 800630c:	bf00      	nop
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000d48 	.word	0x20000d48
 8006318:	20000d18 	.word	0x20000d18
 800631c:	20000d2c 	.word	0x20000d2c
 8006320:	20000d40 	.word	0x20000d40
 8006324:	20000d44 	.word	0x20000d44
 8006328:	20000df4 	.word	0x20000df4
 800632c:	20000d54 	.word	0x20000d54
 8006330:	08006c1c 	.word	0x08006c1c

08006334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3b04      	subs	r3, #4
 8006344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800634c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3b04      	subs	r3, #4
 8006352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f023 0201 	bic.w	r2, r3, #1
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3b04      	subs	r3, #4
 8006362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006364:	4a0c      	ldr	r2, [pc, #48]	; (8006398 <pxPortInitialiseStack+0x64>)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3b14      	subs	r3, #20
 800636e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3b04      	subs	r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f06f 0202 	mvn.w	r2, #2
 8006382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3b20      	subs	r3, #32
 8006388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800638a:	68fb      	ldr	r3, [r7, #12]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	0800639d 	.word	0x0800639d

0800639c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <prvTaskExitError+0x5c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d00c      	beq.n	80063ca <prvTaskExitError+0x2e>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	b672      	cpsid	i
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	b662      	cpsie	i
 80063c4:	60fb      	str	r3, [r7, #12]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <prvTaskExitError+0x2c>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	b672      	cpsid	i
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	b662      	cpsie	i
 80063de:	60bb      	str	r3, [r7, #8]
}
 80063e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063e2:	bf00      	nop
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0fc      	beq.n	80063e4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	2000000c 	.word	0x2000000c
 80063fc:	00000000 	.word	0x00000000

08006400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <pxCurrentTCBConst2>)
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	f380 8809 	msr	PSP, r0
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	4770      	bx	lr
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst2>:
 8006420:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006428:	4808      	ldr	r0, [pc, #32]	; (800644c <prvPortStartFirstTask+0x24>)
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	6800      	ldr	r0, [r0, #0]
 800642e:	f380 8808 	msr	MSP, r0
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8814 	msr	CONTROL, r0
 800643a:	b662      	cpsie	i
 800643c:	b661      	cpsie	f
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	df00      	svc	0
 8006448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800644a:	bf00      	nop
 800644c:	e000ed08 	.word	0xe000ed08

08006450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006456:	4b37      	ldr	r3, [pc, #220]	; (8006534 <xPortStartScheduler+0xe4>)
 8006458:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	22ff      	movs	r2, #255	; 0xff
 8006466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <xPortStartScheduler+0xe8>)
 800647c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800647e:	4b2f      	ldr	r3, [pc, #188]	; (800653c <xPortStartScheduler+0xec>)
 8006480:	2207      	movs	r2, #7
 8006482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006484:	e009      	b.n	800649a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006486:	4b2d      	ldr	r3, [pc, #180]	; (800653c <xPortStartScheduler+0xec>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3b01      	subs	r3, #1
 800648c:	4a2b      	ldr	r2, [pc, #172]	; (800653c <xPortStartScheduler+0xec>)
 800648e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b80      	cmp	r3, #128	; 0x80
 80064a4:	d0ef      	beq.n	8006486 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064a6:	4b25      	ldr	r3, [pc, #148]	; (800653c <xPortStartScheduler+0xec>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f1c3 0307 	rsb	r3, r3, #7
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d00c      	beq.n	80064cc <xPortStartScheduler+0x7c>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	b672      	cpsid	i
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	b662      	cpsie	i
 80064c6:	60bb      	str	r3, [r7, #8]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064cc:	4b1b      	ldr	r3, [pc, #108]	; (800653c <xPortStartScheduler+0xec>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <xPortStartScheduler+0xec>)
 80064d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064d6:	4b19      	ldr	r3, [pc, #100]	; (800653c <xPortStartScheduler+0xec>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064de:	4a17      	ldr	r2, [pc, #92]	; (800653c <xPortStartScheduler+0xec>)
 80064e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064ea:	4b15      	ldr	r3, [pc, #84]	; (8006540 <xPortStartScheduler+0xf0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a14      	ldr	r2, [pc, #80]	; (8006540 <xPortStartScheduler+0xf0>)
 80064f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064f6:	4b12      	ldr	r3, [pc, #72]	; (8006540 <xPortStartScheduler+0xf0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a11      	ldr	r2, [pc, #68]	; (8006540 <xPortStartScheduler+0xf0>)
 80064fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006500:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006502:	f000 f8dd 	bl	80066c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006506:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <xPortStartScheduler+0xf4>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800650c:	f000 f8fc 	bl	8006708 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <xPortStartScheduler+0xf8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a0c      	ldr	r2, [pc, #48]	; (8006548 <xPortStartScheduler+0xf8>)
 8006516:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800651a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800651c:	f7ff ff84 	bl	8006428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006520:	f7ff f84e 	bl	80055c0 <vTaskSwitchContext>
	prvTaskExitError();
 8006524:	f7ff ff3a 	bl	800639c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	e000e400 	.word	0xe000e400
 8006538:	20000e44 	.word	0x20000e44
 800653c:	20000e48 	.word	0x20000e48
 8006540:	e000ed20 	.word	0xe000ed20
 8006544:	2000000c 	.word	0x2000000c
 8006548:	e000ef34 	.word	0xe000ef34

0800654c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	607b      	str	r3, [r7, #4]
}
 8006568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800656a:	4b10      	ldr	r3, [pc, #64]	; (80065ac <vPortEnterCritical+0x60>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3301      	adds	r3, #1
 8006570:	4a0e      	ldr	r2, [pc, #56]	; (80065ac <vPortEnterCritical+0x60>)
 8006572:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006574:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <vPortEnterCritical+0x60>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d111      	bne.n	80065a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800657c:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <vPortEnterCritical+0x64>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00c      	beq.n	80065a0 <vPortEnterCritical+0x54>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	b672      	cpsid	i
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	b662      	cpsie	i
 800659a:	603b      	str	r3, [r7, #0]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <vPortEnterCritical+0x52>
	}
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <vPortExitCritical+0x54>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10c      	bne.n	80065dc <vPortExitCritical+0x28>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	b672      	cpsid	i
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	b662      	cpsie	i
 80065d6:	607b      	str	r3, [r7, #4]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <vPortExitCritical+0x54>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	4a09      	ldr	r2, [pc, #36]	; (8006608 <vPortExitCritical+0x54>)
 80065e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065e6:	4b08      	ldr	r3, [pc, #32]	; (8006608 <vPortExitCritical+0x54>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d105      	bne.n	80065fa <vPortExitCritical+0x46>
 80065ee:	2300      	movs	r3, #0
 80065f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	f383 8811 	msr	BASEPRI, r3
}
 80065f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	2000000c 	.word	0x2000000c
 800660c:	00000000 	.word	0x00000000

08006610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006610:	f3ef 8009 	mrs	r0, PSP
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4b15      	ldr	r3, [pc, #84]	; (8006670 <pxCurrentTCBConst>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f01e 0f10 	tst.w	lr, #16
 8006620:	bf08      	it	eq
 8006622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006634:	b672      	cpsid	i
 8006636:	f380 8811 	msr	BASEPRI, r0
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	b662      	cpsie	i
 8006644:	f7fe ffbc 	bl	80055c0 <vTaskSwitchContext>
 8006648:	f04f 0000 	mov.w	r0, #0
 800664c:	f380 8811 	msr	BASEPRI, r0
 8006650:	bc09      	pop	{r0, r3}
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	6808      	ldr	r0, [r1, #0]
 8006656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	f01e 0f10 	tst.w	lr, #16
 800665e:	bf08      	it	eq
 8006660:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006664:	f380 8809 	msr	PSP, r0
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop

08006670 <pxCurrentTCBConst>:
 8006670:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	b672      	cpsid	i
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	b662      	cpsie	i
 8006692:	607b      	str	r3, [r7, #4]
}
 8006694:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006696:	f7fe fed7 	bl	8005448 <xTaskIncrementTick>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <SysTick_Handler+0x44>)
 80066a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	2300      	movs	r3, #0
 80066aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f383 8811 	msr	BASEPRI, r3
}
 80066b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066c4:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <vPortSetupTimerInterrupt+0x34>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <vPortSetupTimerInterrupt+0x38>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <vPortSetupTimerInterrupt+0x3c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <vPortSetupTimerInterrupt+0x40>)
 80066d6:	fba2 2303 	umull	r2, r3, r2, r3
 80066da:	099b      	lsrs	r3, r3, #6
 80066dc:	4a09      	ldr	r2, [pc, #36]	; (8006704 <vPortSetupTimerInterrupt+0x44>)
 80066de:	3b01      	subs	r3, #1
 80066e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066e2:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <vPortSetupTimerInterrupt+0x34>)
 80066e4:	2207      	movs	r2, #7
 80066e6:	601a      	str	r2, [r3, #0]
}
 80066e8:	bf00      	nop
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	e000e010 	.word	0xe000e010
 80066f8:	e000e018 	.word	0xe000e018
 80066fc:	20000000 	.word	0x20000000
 8006700:	10624dd3 	.word	0x10624dd3
 8006704:	e000e014 	.word	0xe000e014

08006708 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006708:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006718 <vPortEnableVFP+0x10>
 800670c:	6801      	ldr	r1, [r0, #0]
 800670e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006712:	6001      	str	r1, [r0, #0]
 8006714:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006716:	bf00      	nop
 8006718:	e000ed88 	.word	0xe000ed88

0800671c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006722:	f3ef 8305 	mrs	r3, IPSR
 8006726:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b0f      	cmp	r3, #15
 800672c:	d916      	bls.n	800675c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800672e:	4a19      	ldr	r2, [pc, #100]	; (8006794 <vPortValidateInterruptPriority+0x78>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006738:	4b17      	ldr	r3, [pc, #92]	; (8006798 <vPortValidateInterruptPriority+0x7c>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	7afa      	ldrb	r2, [r7, #11]
 800673e:	429a      	cmp	r2, r3
 8006740:	d20c      	bcs.n	800675c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	b672      	cpsid	i
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	b662      	cpsie	i
 8006756:	607b      	str	r3, [r7, #4]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800675c:	4b0f      	ldr	r3, [pc, #60]	; (800679c <vPortValidateInterruptPriority+0x80>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006764:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <vPortValidateInterruptPriority+0x84>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d90c      	bls.n	8006786 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	b672      	cpsid	i
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	b662      	cpsie	i
 8006780:	603b      	str	r3, [r7, #0]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <vPortValidateInterruptPriority+0x68>
	}
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	e000e3f0 	.word	0xe000e3f0
 8006798:	20000e44 	.word	0x20000e44
 800679c:	e000ed0c 	.word	0xe000ed0c
 80067a0:	20000e48 	.word	0x20000e48

080067a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067b0:	f7fe fd8c 	bl	80052cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067b4:	4b5b      	ldr	r3, [pc, #364]	; (8006924 <pvPortMalloc+0x180>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067bc:	f000 f91a 	bl	80069f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067c0:	4b59      	ldr	r3, [pc, #356]	; (8006928 <pvPortMalloc+0x184>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f040 8092 	bne.w	80068f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01f      	beq.n	8006814 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80067d4:	2208      	movs	r2, #8
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4413      	add	r3, r2
 80067da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d016      	beq.n	8006814 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f023 0307 	bic.w	r3, r3, #7
 80067ec:	3308      	adds	r3, #8
 80067ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00c      	beq.n	8006814 <pvPortMalloc+0x70>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	b672      	cpsid	i
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	b662      	cpsie	i
 800680e:	617b      	str	r3, [r7, #20]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d06b      	beq.n	80068f2 <pvPortMalloc+0x14e>
 800681a:	4b44      	ldr	r3, [pc, #272]	; (800692c <pvPortMalloc+0x188>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	429a      	cmp	r2, r3
 8006822:	d866      	bhi.n	80068f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006824:	4b42      	ldr	r3, [pc, #264]	; (8006930 <pvPortMalloc+0x18c>)
 8006826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006828:	4b41      	ldr	r3, [pc, #260]	; (8006930 <pvPortMalloc+0x18c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800682e:	e004      	b.n	800683a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d903      	bls.n	800684c <pvPortMalloc+0xa8>
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f1      	bne.n	8006830 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800684c:	4b35      	ldr	r3, [pc, #212]	; (8006924 <pvPortMalloc+0x180>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006852:	429a      	cmp	r2, r3
 8006854:	d04d      	beq.n	80068f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2208      	movs	r2, #8
 800685c:	4413      	add	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	2308      	movs	r3, #8
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	429a      	cmp	r2, r3
 8006876:	d921      	bls.n	80068bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00c      	beq.n	80068a4 <pvPortMalloc+0x100>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	b672      	cpsid	i
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	b662      	cpsie	i
 800689e:	613b      	str	r3, [r7, #16]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068b6:	69b8      	ldr	r0, [r7, #24]
 80068b8:	f000 f8fe 	bl	8006ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <pvPortMalloc+0x188>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	4a19      	ldr	r2, [pc, #100]	; (800692c <pvPortMalloc+0x188>)
 80068c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068ca:	4b18      	ldr	r3, [pc, #96]	; (800692c <pvPortMalloc+0x188>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b19      	ldr	r3, [pc, #100]	; (8006934 <pvPortMalloc+0x190>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d203      	bcs.n	80068de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068d6:	4b15      	ldr	r3, [pc, #84]	; (800692c <pvPortMalloc+0x188>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a16      	ldr	r2, [pc, #88]	; (8006934 <pvPortMalloc+0x190>)
 80068dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	4b11      	ldr	r3, [pc, #68]	; (8006928 <pvPortMalloc+0x184>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068f2:	f7fe fcf9 	bl	80052e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00c      	beq.n	800691a <pvPortMalloc+0x176>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	b672      	cpsid	i
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	b662      	cpsie	i
 8006914:	60fb      	str	r3, [r7, #12]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <pvPortMalloc+0x174>
	return pvReturn;
 800691a:	69fb      	ldr	r3, [r7, #28]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3728      	adds	r7, #40	; 0x28
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20004a54 	.word	0x20004a54
 8006928:	20004a60 	.word	0x20004a60
 800692c:	20004a58 	.word	0x20004a58
 8006930:	20004a4c 	.word	0x20004a4c
 8006934:	20004a5c 	.word	0x20004a5c

08006938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d04c      	beq.n	80069e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800694a:	2308      	movs	r3, #8
 800694c:	425b      	negs	r3, r3
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4413      	add	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	4b23      	ldr	r3, [pc, #140]	; (80069ec <vPortFree+0xb4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4013      	ands	r3, r2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10c      	bne.n	8006980 <vPortFree+0x48>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	b672      	cpsid	i
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	b662      	cpsie	i
 800697a:	60fb      	str	r3, [r7, #12]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00c      	beq.n	80069a2 <vPortFree+0x6a>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	b672      	cpsid	i
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	b662      	cpsie	i
 800699c:	60bb      	str	r3, [r7, #8]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4b11      	ldr	r3, [pc, #68]	; (80069ec <vPortFree+0xb4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d019      	beq.n	80069e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d115      	bne.n	80069e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <vPortFree+0xb4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	43db      	mvns	r3, r3
 80069c2:	401a      	ands	r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069c8:	f7fe fc80 	bl	80052cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <vPortFree+0xb8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4413      	add	r3, r2
 80069d6:	4a06      	ldr	r2, [pc, #24]	; (80069f0 <vPortFree+0xb8>)
 80069d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069da:	6938      	ldr	r0, [r7, #16]
 80069dc:	f000 f86c 	bl	8006ab8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069e0:	f7fe fc82 	bl	80052e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069e4:	bf00      	nop
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20004a60 	.word	0x20004a60
 80069f0:	20004a58 	.word	0x20004a58

080069f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a00:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <prvHeapInit+0xac>)
 8006a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3307      	adds	r3, #7
 8006a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0307 	bic.w	r3, r3, #7
 8006a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <prvHeapInit+0xac>)
 8006a24:	4413      	add	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <prvHeapInit+0xb0>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a32:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <prvHeapInit+0xb0>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a40:	2208      	movs	r2, #8
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0307 	bic.w	r3, r3, #7
 8006a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <prvHeapInit+0xb8>)
 8006a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <prvHeapInit+0xbc>)
 8006a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a8c:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <prvHeapInit+0xc0>)
 8006a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	20000e4c 	.word	0x20000e4c
 8006aa4:	20004a4c 	.word	0x20004a4c
 8006aa8:	20004a54 	.word	0x20004a54
 8006aac:	20004a5c 	.word	0x20004a5c
 8006ab0:	20004a58 	.word	0x20004a58
 8006ab4:	20004a60 	.word	0x20004a60

08006ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ac0:	4b28      	ldr	r3, [pc, #160]	; (8006b64 <prvInsertBlockIntoFreeList+0xac>)
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e002      	b.n	8006acc <prvInsertBlockIntoFreeList+0x14>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d8f7      	bhi.n	8006ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d108      	bne.n	8006afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	441a      	add	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d118      	bne.n	8006b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <prvInsertBlockIntoFreeList+0xb0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d00d      	beq.n	8006b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e008      	b.n	8006b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <prvInsertBlockIntoFreeList+0xb0>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e003      	b.n	8006b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d002      	beq.n	8006b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20004a4c 	.word	0x20004a4c
 8006b68:	20004a54 	.word	0x20004a54

08006b6c <__libc_init_array>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ba4 <__libc_init_array+0x38>)
 8006b70:	4c0d      	ldr	r4, [pc, #52]	; (8006ba8 <__libc_init_array+0x3c>)
 8006b72:	1b64      	subs	r4, r4, r5
 8006b74:	10a4      	asrs	r4, r4, #2
 8006b76:	2600      	movs	r6, #0
 8006b78:	42a6      	cmp	r6, r4
 8006b7a:	d109      	bne.n	8006b90 <__libc_init_array+0x24>
 8006b7c:	4d0b      	ldr	r5, [pc, #44]	; (8006bac <__libc_init_array+0x40>)
 8006b7e:	4c0c      	ldr	r4, [pc, #48]	; (8006bb0 <__libc_init_array+0x44>)
 8006b80:	f000 f82e 	bl	8006be0 <_init>
 8006b84:	1b64      	subs	r4, r4, r5
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	2600      	movs	r6, #0
 8006b8a:	42a6      	cmp	r6, r4
 8006b8c:	d105      	bne.n	8006b9a <__libc_init_array+0x2e>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b94:	4798      	blx	r3
 8006b96:	3601      	adds	r6, #1
 8006b98:	e7ee      	b.n	8006b78 <__libc_init_array+0xc>
 8006b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9e:	4798      	blx	r3
 8006ba0:	3601      	adds	r6, #1
 8006ba2:	e7f2      	b.n	8006b8a <__libc_init_array+0x1e>
 8006ba4:	08006c68 	.word	0x08006c68
 8006ba8:	08006c68 	.word	0x08006c68
 8006bac:	08006c68 	.word	0x08006c68
 8006bb0:	08006c6c 	.word	0x08006c6c

08006bb4 <memcpy>:
 8006bb4:	440a      	add	r2, r1
 8006bb6:	4291      	cmp	r1, r2
 8006bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bbc:	d100      	bne.n	8006bc0 <memcpy+0xc>
 8006bbe:	4770      	bx	lr
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bca:	4291      	cmp	r1, r2
 8006bcc:	d1f9      	bne.n	8006bc2 <memcpy+0xe>
 8006bce:	bd10      	pop	{r4, pc}

08006bd0 <memset>:
 8006bd0:	4402      	add	r2, r0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d100      	bne.n	8006bda <memset+0xa>
 8006bd8:	4770      	bx	lr
 8006bda:	f803 1b01 	strb.w	r1, [r3], #1
 8006bde:	e7f9      	b.n	8006bd4 <memset+0x4>

08006be0 <_init>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr

08006bec <_fini>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr
